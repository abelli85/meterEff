<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离
注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用了,namespace=mapper接口地址
 -->
<mapper namespace="com.abel.bigwater.verifymeter.mapper.UserMapper">

    <select id="listUser" resultType="com.abel.bigwater.model.BwUser">
        SELECT DISTINCT
        u.user_id AS id
        , user_name AS name
        , user_mobile AS mobile
        , user_email AS email
        , pass_hash AS passHash
        , user_status AS status
        , u.firm_id AS firmId
        , f.firm_name AS firmName
        , email_valid AS emailValid
        , email_token AS emailToken
        , user_token AS userToken
        , u.small_icon AS smallIcon
        , u.big_icon AS bigIcon
        , u.sign_pic AS signPic
        , u.create_by AS createBy
        , u.create_date AS createDate
        , u.update_by AS updateBy
        , u.update_date AS updateDate
        , u.verifyStuff
        , ul.lastLoginTime
        FROM bw_user u LEFT JOIN (
        SELECT user_id, MAX(login_time) AS lastLoginTime
        FROM bw_user_login
        GROUP BY user_id) ul ON u.user_id = ul.user_id

        LEFT JOIN bw_firm f ON u.firm_id = f.firm_id

        <where>
            u.firm_id LIKE #{firmId}
            <if test='idStr != null'>
                AND u.user_id LIKE #{idStr}
            </if>
            <if test='nameStr != null'>
                AND u.user_name LIKE #{nameStr}
            </if>
        </where>
    </select>

    <select id="listUserByRole" resultType="com.abel.bigwater.model.BwUser">
        SELECT u.user_id     AS id
             , u.user_name   AS name
             , u.user_mobile AS mobile
             , u.user_email  AS email
             , u.pass_hash   AS passHash
             , u.user_status AS status
             , u.firm_id     AS firmId
             , f.firm_name   AS firmName
             , u.email_valid AS emailValid
             , u.email_token AS emailToken
             , u.user_token  AS userToken
             , u.small_icon  AS smallIcon
             , u.big_icon    AS bigIcon
             , u.sign_pic    AS signPic
             , u.create_by   AS createBy
             , u.create_date AS createDate
             , u.update_by   AS updateBy
             , u.update_date AS updateDate
             , u.verifyStuff
             , ul.lastLoginTime
        FROM bw_user u
                 LEFT JOIN (
            SELECT user_id,
                   MAX(login_time) AS lastLoginTime
            FROM bw_user_login
            GROUP BY user_id) ul ON u.user_id = ul.user_id
                 JOIN bw_user_role ur ON u.user_id = ur.user_id
                 LEFT JOIN bw_firm f ON u.firm_id = f.firm_id
        WHERE ur.role_name = #{roleName}
    </select>

    <select id="selectUser" resultType="com.abel.bigwater.model.BwUser">
        SELECT u.user_id     as id
             , user_name     as name
             , user_mobile   as mobile
             , user_email    as email
             , user_status   as status
             , pass_hash     as passHash
             , u.firm_id     AS firmId
             , f.firm_name   AS firmName
             , email_valid   AS emailValid
             , email_token   AS emailToken
             , user_token    AS userToken
             , u.small_icon  AS smallIcon
             , u.big_icon    AS bigIcon
             , u.sign_pic    AS signPic
             , u.create_by   AS createBy
             , u.create_date AS createDate
             , u.update_by   AS updateBy
             , u.update_date AS updateDate
             , u.verifyStuff
             , ul.lastLoginTime
        FROM bw_user u
                 LEFT JOIN (
            SELECT user_id, MAX(login_time) AS lastLoginTime
            FROM bw_user_login
            GROUP BY user_id
        ) ul ON u.user_id = ul.user_id
                 LEFT JOIN bw_firm f ON u.firm_id = f.firm_id
        WHERE u.user_id = #{userId}
           OR user_mobile = #{userId}
           OR user_email = #{userId}
    </select>

    <insert id="insertUser" parameterType="com.abel.bigwater.model.BwUser">
        INSERT INTO bw_user
        ( user_id
        , user_name
        , user_mobile
        , user_email
        , pass_hash
        , user_status
        , firm_id
        , email_valid
        , email_token
        , user_token
        , small_icon
        , big_icon
        , sign_pic
        , create_by
        , create_date
        , verifyStuff)
        VALUES ( #{id}
               , #{name}
               , #{mobile}
               , #{email}
               , #{passHash}
               , #{status}
               , #{firmId}
               , #{emailValid}
               , #{emailToken}
               , #{userToken}
               , #{smallIcon}
               , #{bigIcon}
               , #{signPic}
               , #{createBy}
               , GETDATE()
               , #{verifyStuff})

    </insert>

    <delete id="deleteUser" parameterType="com.abel.bigwater.model.BwUser">
        DELETE
        FROM bw_user
        <where>
            user_id = #{id}
            <if test="firmId != null">
                AND firm_id LIKE #{firmId}
            </if>
        </where>
    </delete>

    <update id="updateUser" parameterType="com.abel.bigwater.model.BwUser">

        UPDATE bw_user
        <set>
            <if test='status != null'>
                user_status = #{status},
            </if>
            <if test='firmId != null'>
                firm_id = #{firmId},
            </if>
            <if test='name != null'>
                user_name = #{name},
            </if>
            <if test='mobile != null'>
                user_mobile = #{mobile},
            </if>
            <if test='email != null'>
                user_email = #{email},
            </if>
            <if test='passHash != null'>
                pass_hash = #{passHash},
            </if>
            <if test='signPic != null'>
                sign_pic = #{signPic},
            </if>
            <if test='smallIcon != null'>
                small_icon = #{smallIcon},
            </if>
            <if test='bigIcon != null'>
                big_icon = #{bigIcon},
            </if>
            <if test="verifyStuff != null">
                verifyStuff = #{verifyStuff},
            </if>
            update_by = #{updateBy},
            update_date = GETDATE()
        </set>
        WHERE user_id = #{id}
    </update>

    <update id="updateUserToken" parameterType="com.abel.bigwater.model.BwUser">

        UPDATE bw_user
        <set>
            <if test='emailValid != null'>
                email_valid = #{emailValid},
            </if>
            <if test='emailToken != null'>
                email_token = #{emailToken},
            </if>
            <if test='userToken != null'>
                user_token = #{userToken},
            </if>
        </set>
        WHERE user_id = #{id}
    </update>

    <insert id="insertUserLogin" parameterType="com.abel.bigwater.model.BwUserLogin">
        INSERT INTO bw_user_login
        (session_id,
         user_id,
         login_time,
         ip_addr,
         dev_id,
         share_salt)
        VALUES (#{id},
                #{userId},
                #{loginTime},
                #{ipAddr},
                #{devId},
                #{shareSalt})
    </insert>

    <delete id="deleteUserLogin">
        DELETE
        FROM bw_user_login
        WHERE session_id = #{sid}
    </delete>

    <delete id="deleteUserLoginObsolete">
        DELETE
        FROM bw_user_login
        WHERE login_time &lt; DateAdd(m, -1, getdate())
    </delete>

    <select id="selectUserLogin" parameterType="com.abel.bigwater.verifymeter.webapi.LoginRequest"
            resultType="com.abel.bigwater.model.BwUserLogin">
        SELECT ul.session_id AS id,
               ul.user_id    AS userId,
               ul.login_time AS loginTime,
               ul.ip_addr    AS ipAddr,
               ul.dev_id     AS devId,
               ul.share_salt AS shareSalt,
               u.user_name   AS userName,
               u.firm_id     AS firmId,
               u.small_icon  AS smallIcon,
               u.big_icon    AS bigIcon,
               u.sign_pic    AS signPic,
               u.verifyStuff,
               f.firm_name   AS firmName
        FROM bw_user_login ul
                 JOIN bw_user u ON (ul.user_id = u.user_id)
                 LEFT JOIN bw_firm f ON (u.firm_id = f.firm_id)
        WHERE ul.user_id = #{userId}
          AND ul.dev_id = #{devId}
          AND ul.session_id = #{sessionId}
    </select>

    <select id="listUserLogin" resultType="com.abel.bigwater.model.BwUserLogin">
        SELECT ul.session_id AS id,
        ul.user_id AS userId,
        ul.login_time AS loginTime,
        ul.ip_addr AS ipAddr,
        ul.dev_id AS devId,
        ul.share_salt AS shareSalt,
        u.user_name AS userName,
        u.firm_id AS firmId
        , u.small_icon AS smallIcon
        , u.big_icon AS bigIcon
        , u.sign_pic AS signPic
        , u.verifyStuff
        , f.firm_name AS firmName
        FROM bw_user_login ul JOIN bw_user u ON (ul.user_id = u.user_id)
        LEFT JOIN bw_firm f ON (u.firm_id = f.firm_id)
        WHERE f.firm_id LIKE #{firmId}
        <if test='userId != null'>
            AND ul.user_id LIKE #{userId}
        </if>
        <if test='startTime != null'>
            AND ul.login_time &gt;= #{startTime}
        </if>
        <if test='endTime != null'>
            AND ul.login_time &lt; #{endTime}
        </if>
        <if test='sessionId != null'>
            AND ul.session_id = #{sessionId}
        </if>
    </select>

    <delete id="kickUserLogin">

        DELETE ul FROM bw_user_login ul
        <where>
            <choose>
                <when test='sessionId != null'>
                    AND ul.session_id = #{sessionId}
                </when>
                <otherwise>
                    <if test='firmId != null'>
                        ul.firm_id LIKE #{firmId}
                    </if>
                    <if test='userId != null'>
                        AND ul.user_id = #{userId}
                    </if>
                    <if test='startTime != null'>
                        AND ul.login_time &gt;= #{startTime}
                    </if>
                    <if test='endTime != null'>
                        AND ul.login_time &lt; #{endTime}
                    </if>
                </otherwise>
            </choose>
        </where>
    </delete>

    <select id="rightList" resultType="com.abel.bigwater.model.BwRight">
        SELECT right_name AS name
             , right_desc AS rightDesc
             , pre_init   AS preInit
        FROM bw_right
    </select>

    <select id="roleList" resultType="com.abel.bigwater.model.BwRole">
        SELECT role_name as name
             , role_desc as roleDesc
             , pre_init  AS preInit
        FROM bw_role
    </select>

    <select id="userRoleList" resultType="com.abel.bigwater.model.BwRole">
        SELECT ur.user_id   AS userId
             , ur.role_name as name
             , r.role_desc  as roleDesc
        FROM bw_user_role ur
                 JOIN bw_role r ON ur.role_name = r.role_name
        WHERE ur.user_id = #{userId}
    </select>

    <select id="userRightList" resultType="com.abel.bigwater.model.BwRight">
        SELECT DISTINCT r.right_name AS name
        , r.right_desc AS rightDesc
        FROM bw_user_role ur
        JOIN bw_role_right rr ON ur.role_name = rr.role_name
        JOIN bw_right r ON rr.right_name = r.right_name
        WHERE ur.user_id = #{userId}
        <if test='rightName != null'>
            AND r.right_name = #{rightName}
        </if>

    </select>

    <select id="selectRole" resultType="com.abel.bigwater.model.BwRole">
        SELECT role_name as name, role_desc as roleDesc
        FROM bw_role
        WHERE role_name = #{name}

    </select>

    <select id="roleRightList" resultType="com.abel.bigwater.model.BwRight">
        SELECT rr.right_name as name
             , r.right_desc  AS rightDesc
        FROM bw_role_right rr
                 JOIN bw_right r ON rr.right_name = r.right_name
        WHERE rr.role_name = #{roleName}

    </select>

    <insert id="insertRole" parameterType="com.abel.bigwater.model.BwRole">
        INSERT into bw_role(role_name, role_desc, pre_init)
        VALUES (#{name}, #{roleDesc}, 0)
    </insert>

    <insert id="insertRoleRight">
        INSERT INTO bw_role_right (role_name, right_name)
        VALUES (#{roleName}, #{rightName})
    </insert>

    <insert id="insertUserRole">
        INSERT INTO bw_user_role(user_id, role_name)
        VALUES (#{userId}, #{roleName})
    </insert>

    <update id="updateRole" parameterType="com.abel.bigwater.model.BwRole">
        UPDATE bw_role
        set role_name = #{name},
            role_desc = #{roleDesc}
        WHERE role_name = #{name}
          AND pre_init = 0
    </update>

    <delete id="deleteRole">
        DELETE
        FROM bw_role
        WHERE role_name = #{roleName}
          AND pre_init = 0
    </delete>

    <delete id="deleteRoleRight">
        DELETE rr
        FROM bw_role_right rr,
             bw_role rl
        WHERE rl.role_name = rr.role_name
          AND rr.role_name = #{roleName}
          AND rl.pre_init = 0
    </delete>

    <delete id="deleteUserRole">
        DELETE
        FROM bw_user_role
        WHERE user_id = #{userId}
    </delete>

    <update id="updateLoginCity" parameterType="com.abel.bigwater.model.BwUserLogin">
        UPDATE bw_user_login
        <set>
            login_city = #{city}
        </set>
        <where>
            session_id = #{id}
        </where>

    </update>

    <insert id="insertUserOper" parameterType="com.abel.bigwater.model.BwUserOper"
            keyProperty="operId" keyColumn="oper_id" useGeneratedKeys="true">
        INSERT INTO bw_user_oper
        (user_id,
         oper_time,
         return_time,
         firm_id,
         dev_id,
         oper_case,
         oper_role,
         oper_right,
         oper_result,
         oper_desc,
         client_ip,
         server_ip,
         oper_city)
        VALUES (#{userId},
                #{operTime},
                #{returnTime},
                #{firmId},
                #{devId},
                #{operCase},
                #{operRole},
                #{operRight},
                #{operResult},
                #{operDesc},
                #{clientIp},
                #{serverIp},
                #{operCity});
    </insert>

    <update id="updateUserOper" parameterType="com.abel.bigwater.model.BwUserOper">
        UPDATE bw_user_oper
        <set>
            <if test="operCity != null">
                oper_city = #{operCity},
            </if>
            <if test="returnTime != null">
                return_time = #{returnTime}
            </if>
        </set>
        <where>
            oper_id = #{operId}
        </where>
    </update>

    <select id="listUserOper" parameterType="com.abel.bigwater.verifymeter.webapi.UserOperParam"
            resultType="com.abel.bigwater.model.BwUserOper">
        SELECT oper_id AS operId
        , user_id AS userId
        , oper_time AS operTime
        , return_time AS returnTime
        , firm_id AS firmId
        , oper_case AS operCase
        , oper_role AS operRole
        , oper_right AS operRight
        , oper_result AS operResult
        , oper_desc AS operDesc
        FROM bw_user_oper
        <where>
            <if test='firmId != null'>
                firm_id LIKE #{firmId}
            </if>
            <if test='operTime1 != null'>
                AND oper_time &gt;= #{operTime1}
            </if>
            <if test='operTime2 != null'>
                AND oper_time &lt; #{operTime2}
            </if>
            <if test='userId != null'>
                AND user_id = #{userId}
            </if>
            <if test='operCase != null'>
                AND oper_case = #{operCase}
            </if>
        </where>
    </select>

    <select id="statUserOper" parameterType="com.abel.bigwater.verifymeter.webapi.UserOperParam"
            resultType="com.abel.bigwater.model.BwUserOper">
        SELECT user_id AS userId
        , oper_case AS operCase
        , COUNT(1) AS operCount
        FROM bw_user_oper
        <where>
            <if test='firmId != null'>
                firm_id LIKE #{firmId}
            </if>
            <if test='operTime1 != null'>
                AND oper_time &gt;= #{operTime1}
            </if>
            <if test='operTime2 != null'>
                AND oper_time &lt; #{operTime2}
            </if>
            <if test='userId != null'>
                AND user_id = #{userId}
            </if>
            <if test='operCase != null'>
                AND oper_case = #{operCase}
            </if>
        </where>
        GROUP BY user_id, oper_case
    </select>

    <select id="listStdAuth" parameterType="com.abel.bigwater.verifymeter.webapi.UserOperParam"
            resultType="com.abel.bigwater.verifymeter.model.VcStdAuth">
        SELECT
        aid
        , firmId
        , applyDate
        , acquireDate
        , stdNo
        , stdValidDate
        , authNo
        , authValidDate
        , createBy
        , createDate
        , updateBy
        , updateDate
        FROM dbo.vc_std_auth
        <where>
            <if test="aid != null">
                aid = #{aid}
            </if>

            <choose>
                <when test="stdValidDate != null">
                    AND stdValidDate &gt;= #{stdValidDate}
                </when>
                <otherwise>
                    AND stdValidDate &gt;= GETDATE()
                </otherwise>
            </choose>

            <choose>
                <when test="authValidDate != null">
                    AND authValidDate &gt;= #{authValidDate}
                </when>
                <otherwise>
                    AND authValidDate &gt;= GETDATE()
                </otherwise>
            </choose>
        </where>
    </select>

    <insert id="addStdAuth" parameterType="com.abel.bigwater.verifymeter.model.VcStdAuth"
            keyColumn="aid" keyProperty="aid" useGeneratedKeys="true">
        INSERT INTO dbo.vc_std_auth
        ( firmId
        , applyDate
        , acquireDate
        , stdNo
        , stdValidDate
        , authNo
        , authValidDate
        , createBy
        , createDate)
        VALUES ( #{firmId}
               , #{applyDate}
               , #{acquireDate}
               , #{stdNo}
               , #{stdValidDate}
               , #{authNo}
               , #{authValidDate}
               , #{createBy}
               , GETDATE())
    </insert>

    <delete id="deleteStdAuth" parameterType="com.abel.bigwater.verifymeter.webapi.UserOperParam">
        DELETE FROM dbo.vc_std_auth
        <where>
            aid = #{aid}
        </where>
    </delete>

</mapper>