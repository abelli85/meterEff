<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离
注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用了,namespace=mapper接口地址
 -->
<mapper namespace="com.abel.bigwater.mapper.MeterMapper">
    <select id="selectMeterBrand" resultType="com.abel.bigwater.model.BwMeterBrand">
        SELECT valueId   AS brandId,
               valueName AS brandName
        FROM vc_code_value
        WHERE codeId = 'BRAND'
        ORDER BY valueOrder
    </select>

    <select id="selectRemoteBrand" resultType="com.abel.bigwater.model.BwRemoteBrand">
        SELECT valueId   AS brandId,
               valueName AS brandName
        FROM vc_code_value
        WHERE codeId = 'REMOTE'
        ORDER BY valueOrder
    </select>

    <insert id="insertMeter" parameterType="com.abel.bigwater.model.zone.ZoneMeter">
        INSERT INTO bw_meter ( meterId
        , userCode
        , meterCode
        , meterName
        , meterOrder
        , extId
        , location
        , installDate
        , meterPulse
        , q1
        , q2
        , q3
        , q4
        , q1r
        , q2r
        , q3r
        , q4r
        , sizeId
        , sizeName
        , modelSize
        , typeId
        , userType
        , waterPrice
        , serviceArea
        , servicePopulation
        , contactNumber
        , chargable
        , firmId
        , meterBrandId
        , steelNo
        , remoteBrandId
        , rtuId
        , rtuCode
        , rtuAddr
        , rtuInstallDate
        , rtuInstallPerson
        , rtuContact
        , commCard
        , remoteModel
        , remoteMemo
        , commIsp
        , pressureRange
        , pressureMaxLimit
        , pressureMinLimit
        , powerType
        , meterStatus
        , adminMobile
        <include refid="meterLocFields"></include>
        , lastCalib
        , memo
        , decayId
        , createBy
        , createDate
        , updateBy
        , updateDate)
        values ( #{meterId}
        , #{userCode}
        , #{meterCode}
        , #{meterName}
        , #{meterOrder}
        , #{extId}
        , #{location}
        , #{installDate}
        , #{meterPulse}
        , #{q1}
        , #{q2}
        , #{q3}
        , #{q4}
        , #{q1r}
        , #{q2r}
        , #{q3r}
        , #{q4r}
        , #{sizeId}
        , #{sizeName}
        , #{modelSize}
        , #{typeId}
        , #{userType}
        , #{waterPrice}
        , #{serviceArea}
        , #{servicePopulation}
        , #{contactNumber}
        , #{chargable}
        , #{firmId}
        , #{meterBrandId}
        , #{steelNo}
        , #{remoteBrandId}
        , #{rtuId}
        , #{rtuCode}
        , #{rtuAddr}
        , #{rtuInstallDate}
        , #{rtuInstallPerson}
        , #{rtuContact}
        , #{commCard}
        , #{remoteModel}
        , #{remoteMemo}
        , #{commIsp}
        , #{pressureRange}
        , #{pressureMaxLimit}
        , #{pressureMinLimit}
        , #{powerType}
        , #{meterStatus}
        , #{adminMobile}
        <include refid="meterLocValues"></include>
        , #{lastCalib}
        , #{memo}
        , #{decayId}
        , #{createBy}
        , now()
        , #{updateBy}
        , now())
    </insert>

    <sql id="meterLocFields">
        <if test="meterLoc != null">
            , meterLoc
        </if>
    </sql>
    <sql id="meterLocValues">
        <if test="meterLoc != null">
            , st_geomFromText(#{meterLoc})
        </if>
    </sql>

    <delete id="deleteMeter" parameterType="com.abel.bigwater.api.MeterParam">
        DELETE FROM bw_meter
        <where>
            <choose>
                <when test="meterId != null">
                    meterId LIKE #{meterId}
                </when>
                <otherwise>
                    AND meterId IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </otherwise>
            </choose>

            <if test="firmId != null">
                AND firmId LIKE #{firmId}
            </if>
        </where>
    </delete>

    <update id="updateMeter" parameterType="com.abel.bigwater.model.zone.ZoneMeter">
        UPDATE bw_meter
            <set>
            userCode = #{userCode}
            , meterCode = #{meterCode}
            , meterName = #{meterName}
            , meterOrder = #{meterOrder}
            <if test="extId != null">
                , extId = #{extId}
            </if>
            , location = #{location}
            , installDate = #{installDate}
            , meterPulse = #{meterPulse}
            , q1 = #{q1}
            , q2 = #{q2}
            , q3 = #{q3}
            , q4 = #{q4}
            , q1r = #{q1r}
            , q2r = #{q2r}
            , q3r = #{q3r}
            , q4r = #{q4r}
            , sizeId = #{sizeId}
            , sizeName = #{sizeName}
            , modelSize = #{modelSize}
            , typeId = #{typeId}
            , userType = #{userType}
            , waterPrice = #{waterPrice}
            , serviceArea = #{serviceArea}
            , servicePopulation = #{servicePopulation}
            , contactNumber = #{contactNumber}
            , chargable = #{chargable}
            , firmId = #{firmId}
            , meterBrandId = #{meterBrandId}
            , steelNo = #{steelNo}
            , remoteBrandId = #{remoteBrandId}
            , rtuId = #{rtuId}
            , rtuCode = #{rtuCode}
            , rtuAddr = #{rtuAddr}
            , rtuInstallDate = #{rtuInstallDate}
            , rtuInstallPerson = #{rtuInstallPerson}
            , rtuContact = #{rtuContact}
            , commCard = #{commCard}
            , remoteModel = #{remoteModel}
            , remoteMemo = #{remoteMemo}
            , commIsp = #{commIsp}
            , pressureRange = #{pressureRange}
            , pressureMaxLimit = #{pressureMaxLimit}
            , pressureMinLimit = #{pressureMinLimit}
            , powerType = #{powerType}
            , meterStatus = #{meterStatus}
            , adminMobile = #{adminMobile}
            , meterLoc = st_geomFromText(#{meterLoc})
            , lastCalib = #{lastCalib}
            , memo = #{memo}
            , decayId = #{decayId}
            , updateBy = #{updateBy}
            , updateDate = now()
            </set>
        <where>
            meterId = #{meterId}
            <if test="subFirmId != null">
                AND firmId LIKE #{subFirmId}
            </if>
        </where>
    </update>

    <update id="updateMeterBatch" parameterType="com.abel.bigwater.api.MeterParam">
        UPDATE bw_meter
        SET userCode = tmp.userCode
        , meterCode = tmp.meterCode
        , meterName = tmp.meterName
        , meterOrder = tmp.meterOrder
        -- , extId = tmp.extId
        , location = tmp.location
        , installDate = tmp.installDate
        , meterPulse = tmp.meterPulse
        , q1 = tmp.q1
        , q2 = tmp.q2
        , q3 = tmp.q3
        , q4 = tmp.q4
        , q1r = tmp.q1r
        , q2r = tmp.q2r
        , q3r = tmp.q3r
        , q4r = tmp.q4r
        , sizeId = tmp.sizeId
        , sizeName = tmp.sizeName
        , modelSize = tmp.modelSize
        , typeId = tmp.typeId
        , userType = tmp.userType
        , waterPrice = tmp.waterPrice
        , serviceArea = tmp.serviceArea
        , servicePopulation = tmp.servicePopulation
        , contactNumber = tmp.contactNumber
        , chargable = tmp.chargable
        , firmId = tmp.firmId
        , meterBrandId = tmp.meterBrandId
        , steelNo = tmp.steelNo
        , remoteBrandId = tmp.remoteBrandId
        , rtuId = tmp.rtuId
        , rtuCode = tmp.rtuCode
        , rtuAddr = tmp.rtuAddr
        , rtuInstallDate = tmp.rtuInstallDate
        , rtuInstallPerson = tmp.rtuInstallPerson
        , rtuContact = tmp.rtuContact
        , commCard = tmp.commCard
        , remoteModel = tmp.remoteModel
        , remoteMemo = tmp.remoteMemo
        , commIsp = tmp.commIsp
        , pressureRange = tmp.pressureRange
        , pressureMaxLimit = tmp.pressureMaxLimit
        , pressureMinLimit = tmp.pressureMinLimit
        , powerType = tmp.powerType
        , meterStatus = tmp.meterStatus
        , adminMobile = tmp.adminMobile
        , meterLoc = st_geomFromText(tmp.meterLoc)
        , lastCalib = tmp.lastCalib
        , memo = tmp.memo
        , decayId = tmp.decayId
        , updateBy = tmp.updateBy
        , updateDate = now()
        FROM (
            VALUES
            <foreach collection="meterList" item="m1" separator=",">
                (#{m1.meterId}
                , #{m1.userCode}
                , #{m1.meterCode}
                , #{m1.meterName}
                , #{m1.meterOrder}
                , #{m1.extId}
                , #{m1.location}
                , #{m1.installDate}
                , #{m1.meterPulse}
                , #{m1.q1}
                , #{m1.q2}
                , #{m1.q3}
                , #{m1.q4}
                , #{m1.q1r}
                , #{m1.q2r}
                , #{m1.q3r}
                , #{m1.q4r}
                , #{m1.sizeId}
                , #{m1.sizeName}
                , #{m1.modelSize}
                , #{m1.typeId}
                , #{m1.userType}
                , #{m1.waterPrice}
                , #{m1.serviceArea}
                , #{m1.servicePopulation}
                , #{m1.contactNumber}
                , #{m1.chargable}
                , #{m1.firmId}
                , #{m1.meterBrandId}
                , #{m1.steelNo}
                , #{m1.remoteBrandId}
                , #{m1.rtuId}
                , #{m1.rtuCode}
                , #{m1.rtuAddr}
                , #{m1.rtuInstallDate}
                , #{m1.rtuInstallPerson}
                , #{m1.rtuContact}
                , #{m1.commCard}
                , #{m1.remoteModel}
                , #{m1.remoteMemo}
                , #{m1.commIsp}
                , #{m1.pressureRange}
                , #{m1.pressureMaxLimit}
                , #{m1.pressureMinLimit}
                , #{m1.powerType}
                , #{m1.meterStatus}
                , #{m1.adminMobile}
                , #{m1.meterLoc}
                , #{m1.lastCalib}
                , #{m1.memo}
                , #{m1.decayId}
                , #{m1.updateBy}
                )
            </foreach>
            ) AS tmp
            (meterId
            , userCode
            , meterCode
            , meterName
            , meterOrder
            , extId
            , location
            , installDate
            , meterPulse
            , q1
            , q2
            , q3
            , q4
            , q1r
            , q2r
            , q3r
            , q4r
            , sizeId
            , sizeName
            , modelSize
            , typeId
            , userType
            , waterPrice
            , serviceArea
            , servicePopulation
            , contactNumber
            , chargable
            , firmId
            , meterBrandId
            , steelNo
            , remoteBrandId
            , rtuId
            , rtuCode
            , rtuAddr
            , rtuInstallDate
            , rtuInstallPerson
            , rtuContact
            , commCard
            , remoteModel
            , remoteMemo
            , commIsp
            , pressureRange
            , pressureMaxLimit
            , pressureMinLimit
            , powerType
            , meterStatus
            , adminMobile
            , meterLoc
            , lastCalib
            , memo
            , decayId
            , updateBy
            )
        <where>
            bw_meter.meterId = tmp.meterId
            <if test="subFirmId != null">
                AND bw_meter.firmId LIKE #{subFirmId}
            </if>
        </where>
    </update>

    <update id="updateMeterDecay" parameterType="com.abel.bigwater.api.MeterParam">
        UPDATE bw_meter
        SET decayId = #{decayId}
        <where>
            <if test="firmId != null">
                firmId LIKE #{firmId}
            </if>
            <choose>
                <when test="meterId != null">
                    AND meterId = #{meterId}
                </when>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <otherwise>
                    AND meterBrandId LIKE #{meterBrandId}
                    AND sizeId = #{sizeId}
                    <if test="sizeName != null">
                        AND sizeName LIKE #{sizeName}
                    </if>
                    AND modelSize LIKE #{modelSize}
                </otherwise>
            </choose>
        </where>
    </update>

    <select id="listMeterVerify" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.eff.VcMeterVerify">
        SELECT v.wid AS verifyId
        , m.meterId
        , m.meterCode
        , v.meterId AS steelNo

        , v.batchId
        , v.tempId
        , v.verifyDate
        , v.stuffName
        , v.verifyResult
        , v.boardResult
        , v.forceVerifyNo
        , v.moduleNo
        , v.clientName
        , v.factoryName
        , v.meterName
        , v.meterType
        , v.sizeId
        , v.modelSize
        , v.portType
        , v.verifyRule
        , v.standardInstrument
        , v.standardParam
        , v.indoorTemp
        , v.moisture
        , v.validDate
        , v.convertResult
        , v.pressResult
        , v.instrumentno
        , v.accurateGrade
        , v.pipeTemp
        , v.pipePressure
        , v.pulse
        , v.density
        , v.displayDiff
        , v.convertDiff
        , v.q4
        , v.q3
        , v.q3toq1
        , v.q4toq3
        , v.q2toq1
        , v.qr1
        , v.qr2
        , v.qr3
        , v.qr4
        , v.maxFlow
        , v.minFlow
        , v.commonFlow
        , v.convertLimit
        , v.verifyAgain
        , v.outerCheck
        , v.dataSrc
        , v.itemId
        FROM vc_meter_verify_result v
            JOIN bw_meter m ON v.meterId = m.steelNo
        <where>
            <if test="batchId != null">
                (v.batchId IS NULL OR v.batchId LIKE #{batchId})
            </if>

            <if test="steelNo != null">
                AND v.meterid LIKE #{steelNo}
            </if>

            <choose>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
            </choose>
            <if test="meterCode != null">
                AND m.meterCode LIKE #{meterCode}
            </if>
            <if test="instrumentNo != null">
                AND v.instrumentNo LIKE #{instrumentNo}
            </if>

            <choose>
                <when test="verifyDate != null">
                    AND v.verifyDate = #{verifyDate}
                </when>
                <when test="verifyDateStart != null and verifyDateEnd != null">
                    AND v.verifyDate BETWEEN #{verifyDateStart} AND #{verifyDateEnd}
                </when>
                <when test="verifyDateStart != null">
                    AND v.verifyDate &gt;= #{verifyDateStart}
                </when>
                <when test="verifyDateEnd != null">
                    AND v.verifyDate &lt;= #{verifyDateEnd}
                </when>
            </choose>
        </where>
    </select>

    <insert id="insertMeterVerify" parameterType="com.abel.bigwater.model.zone.ZoneMeter">
        INSERT INTO vc_meter_verify_result( meterId
        , batchId
        , tempId
        , verifyDate
        , stuffName
        , verifyResult
        , boardResult
        , forceVerifyNo
        , moduleNo
        , clientName
        , factoryName
        , meterName
        , meterType
        , sizeId
        , modelSize
        , portType
        , verifyRule
        , standardInstrument
        , standardParam
        , indoorTemp
        , moisture
        , validDate
        , convertResult
        , pressResult
        , instrumentNo
        , accurateGrade
        , pipeTemp
        , pipePressure
        , pulse
        , density
        , displayDiff
        , convertDiff
        , q4
        , q3
        , q3toq1
        , q4toq3
        , q2toq1
        , qr1
        , qr2
        , qr3
        , qr4
        , maxFlow
        , minFlow
        , commonFlow
        , convertLimit
        , verifyAgain
        , outerCheck
        , dataSrc
        , itemId)
        VALUES
        <foreach collection="verifyList" separator="," item="v1">
            (#{steelNo}
            , #{v1.batchId}
            , #{v1.tempId}
            , #{v1.verifyDate}
            , #{v1.stuffName}
            , #{v1.verifyResult}
            , #{v1.boardResult}
            , #{v1.forceVerifyNo}
            , #{v1.moduleNo}
            , #{v1.clientName}
            , #{v1.factoryName}
            , #{v1.meterName}
            , #{v1.meterType}
            , #{v1.sizeId}
            , #{v1.modelSize}
            , #{v1.portType}
            , #{v1.verifyRule}
            , #{v1.standardInstrument}
            , #{v1.standardParam}
            , #{v1.indoorTemp}
            , #{v1.moisture}
            , #{v1.validDate}
            , #{v1.convertResult}
            , #{v1.pressResult}
            , #{v1.instrumentNo}
            , #{v1.accurateGrade}
            , #{v1.pipeTemp}
            , #{v1.pipePressure}
            , #{v1.pulse}
            , #{v1.density}
            , #{v1.displayDiff}
            , #{v1.convertDiff}
            , #{v1.q4}
            , #{v1.q3}
            , #{v1.q3toq1}
            , #{v1.q4toq3}
            , #{v1.q2toq1}
            , #{v1.qr1}
            , #{v1.qr2}
            , #{v1.qr3}
            , #{v1.qr4}
            , #{v1.maxFlow}
            , #{v1.minFlow}
            , #{v1.commonFlow}
            , #{v1.convertLimit}
            , #{v1.verifyAgain}
            , #{v1.outerCheck}
            , #{v1.dataSrc}
            , #{v1.itemId}
            )
        </foreach>
    </insert>

    <delete id="deleteMeterVerify" parameterType="com.abel.bigwater.api.MeterParam">
        DELETE
        FROM vc_meter_verify_result v
        USING bw_meter m
        <where>
            v.meterId = m.steelNo

            <choose>
                <when test="verifyIdList != null">
                    AND v.wid IN
                    <foreach collection="verifyIdList" item="vid" open="(" separator="," close=")">
                        #{vid}
                    </foreach>
                </when>
                <when test="verifyId != null">
                    AND v.wid = #{verifyId}
                </when>
            </choose>

            <if test="batchId != null">
                AND (v.batchId IS NULL OR v.batchId LIKE #{batchId})
            </if>

            <if test="steelNo != null">
                AND v.meterid LIKE #{steelNo}
            </if>

            <choose>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
            </choose>
            <if test="meterCode != null">
                AND m.meterCode LIKE #{meterCode}
            </if>
            <if test="instrumentNo != null">
                AND v.instrumentNo LIKE #{instrumentNo}
            </if>

            <choose>
                <when test="verifyDate != null">
                    AND v.verifyDate = #{verifyDate}
                </when>
                <when test="verifyDateStart != null and verifyDateEnd != null">
                    AND v.verifyDate BETWEEN #{verifyDateStart} AND #{verifyDateEnd}
                </when>
                <when test="verifyDateStart != null">
                    AND v.verifyDate &gt;= #{verifyDateStart}
                </when>
                <when test="verifyDateEnd != null">
                    AND v.verifyDate &lt;= #{verifyDateEnd}
                </when>
            </choose>
        </where>
    </delete>

    <select id="listVerifyPoint" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.eff.VcMeterVerifyPoint">
        SELECT p.wid AS pointId
        ,p.pointName
        ,p.pointNo
        ,p.pointFlow
        ,p.pointDev
        ,p.lowLimit
        ,p.highLimit

        ,m.meterId
        ,m.meterCode
        ,p.meterId AS steelNo

        ,p.startReading
        ,p.endReading
        ,p.totalVolume
        ,p.verifyDura
        ,p.avgFlow
        ,p.waterTemp
        ,p.startMass
        ,p.endMass
        ,p.standardMass
        ,p.density
        ,p.standardVolume
        ,p.standardDura
        ,p.standardFlow
        ,p.verifyDate
        ,p.boardResult
        ,p.instrumentNo
        ,v.batchId
        ,p.boardMemo
        ,p.itemId
        FROM vc_meter_verify_point p
        LEFT JOIN vc_meter_verify_result v ON (p.meterId = v.meterId AND p.verifyDate = v.verifyDate)
        JOIN bw_meter m ON p.meterId = m.steelNo
        <where>
            <if test="batchId != null">
                (v.batchId IS NULL OR v.batchId LIKE #{batchId})
            </if>

            <if test="steelNo != null">
                AND p.meterid LIKE #{steelNo}
            </if>

            <choose>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
            </choose>
            <if test="meterCode != null">
                AND m.meterCode LIKE #{meterCode}
            </if>
            <if test="instrumentNo != null">
                AND p.instrumentNo LIKE #{instrumentNo}
            </if>

            <choose>
                <when test="verifyDate != null">
                    AND p.verifyDate = #{verifyDate}
                </when>
                <when test="verifyDateStart != null and verifyDateEnd != null">
                    AND p.verifyDate BETWEEN #{verifyDateStart} AND #{verifyDateEnd}
                </when>
                <when test="verifyDateStart != null">
                    AND p.verifyDate &gt;= #{verifyDateStart}
                </when>
                <when test="verifyDateEnd != null">
                    AND p.verifyDate &lt;= #{verifyDateEnd}
                </when>
            </choose>
        </where>
    </select>

    <select id="listVerifyPointLast" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.eff.VcMeterVerifyPoint">
        SELECT p.wid AS pointId
        ,p.pointName
        ,p.pointNo
        ,p.pointFlow
        ,p.pointDev
        ,p.lowLimit
        ,p.highLimit
        ,m.meterId
        ,m.meterCode

        ,p.startReading
        ,p.endReading
        ,p.totalVolume
        ,p.verifyDura
        ,p.avgFlow
        ,p.waterTemp
        ,p.startMass
        ,p.endMass
        ,p.standardMass
        ,p.density
        ,p.standardVolume
        ,p.standardDura
        ,p.standardFlow
        ,p.verifyDate
        ,p.boardResult
        ,p.instrumentNo
        ,p.boardMemo
        ,p.itemId
        FROM vc_meter_verify_point p
        JOIN (
            SELECT p1.meterId
                   , MAX(verifyDate) verifyDate
            FROM vc_meter_verify_point p1
            JOIN bw_meter m1 ON p1.meterid = m1.steelno
            <where>
                <if test="steelNo != null">
                    AND p1.meterid LIKE #{steelNo}
                </if>

                <choose>
                    <when test="meterId != null">
                        AND m1.meterId LIKE #{meterId}
                    </when>
                    <when test="meterIdList != null and meterIdList.size > 0">
                        AND m1.meterId IN
                        <foreach collection="meterIdList" index="idx" item="mid" open="(" close=")" separator=",">
                            #{mid}
                        </foreach>
                    </when>
                </choose>
                <if test="meterCode != null">
                    AND m1.meterCode LIKE #{meterCode}
                </if>
            </where>
            GROUP BY p1.meterId
        ) pmax ON (p.meterId = pmax.meterId AND p.verifyDate = pmax.verifyDate)
        JOIN bw_meter m ON p.meterid = m.steelno
        <where>
            <if test="steelNo != null">
                AND p.meterid LIKE #{steelNo}
            </if>

            <choose>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
            </choose>
            <if test="meterCode != null">
                AND m.meterCode LIKE #{meterCode}
            </if>
            <if test="instrumentNo != null">
                AND p.instrumentNo LIKE #{instrumentNo}
            </if>

            <choose>
                <when test="verifyDate != null">
                    AND p.verifyDate = #{verifyDate}
                </when>
                <when test="verifyDateStart != null and verifyDateEnd != null">
                    AND p.verifyDate BETWEEN #{verifyDateStart} AND #{verifyDateEnd}
                </when>
                <when test="verifyDateStart != null">
                    AND p.verifyDate &gt;= #{verifyDateStart}
                </when>
                <when test="verifyDateEnd != null">
                    AND p.verifyDate &lt;= #{verifyDateEnd}
                </when>
            </choose>
        </where>
    </select>

    <insert id="insertVerifyPoint" parameterType="com.abel.bigwater.model.zone.ZoneMeter">
        INSERT INTO vc_meter_verify_point( pointName
        , pointNo
        , pointFlow
        , pointDev
        , lowLimit
        , highLimit
        , meterId
        , startReading
        , endReading
        , totalVolume
        , verifyDura
        , avgFlow
        , waterTemp
        , startMass
        , endMass
        , standardMass
        , density
        , standardVolume
        , standardDura
        , standardFlow
        , verifyDate
        , boardResult
        , instrumentNo
        , batchId
        , boardMemo
        , itemId
        )
        VALUES
        <foreach collection="pointList" item="pt" separator=",">
            ( #{pt.pointName}
            , #{pt.pointNo}
            , #{pt.pointFlow}
            , #{pt.pointDev}
            , #{pt.lowLimit}
            , #{pt.highLimit}
            , #{steelNo}
            , #{pt.startReading}
            , #{pt.endReading}
            , #{pt.totalVolume}
            , #{pt.verifyDura}
            , #{pt.avgFlow}
            , #{pt.waterTemp}
            , #{pt.startMass}
            , #{pt.endMass}
            , #{pt.standardMass}
            , #{pt.density}
            , #{pt.standardVolume}
            , #{pt.standardDura}
            , #{pt.standardFlow}
            , #{pt.verifyDate}
            , #{pt.boardResult}
            , #{pt.instrumentNo}
            , #{pt.batchId}
            , #{pt.boardMemo}
            , #{pt.itemId}
            )
        </foreach>
    </insert>

    <delete id="deleteVerifyPoint" parameterType="com.abel.bigwater.api.MeterParam">
        DELETE
        FROM vc_meter_verify_point p
        USING bw_meter m
        <where>
            m.steelNo = p.meterId

            <choose>
                <when test="pointIdList != null">
                    AND p.wid IN
                    <foreach collection="pointIdList" item="ptid" separator="," open="(" close=")">
                        #{ptid}
                    </foreach>
                </when>
                <when test="pointId != null">
                    AND p.wid = #{pointId}
                </when>
            </choose>

            <if test="steelNo != null">
                AND p.meterid LIKE #{steelNo}
            </if>
            <choose>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
            </choose>
            <if test="meterCode != null">
                AND m.meterCode LIKE #{meterCode}
            </if>
            <if test="instrumentNo != null">
                AND p.instrumentNo LIKE #{instrumentNo}
            </if>

            <choose>
                <when test="verifyDate != null">
                    AND p.verifyDate = #{verifyDate}
                </when>
                <when test="verifyDateStart != null and verifyDateEnd != null">
                    AND p.verifyDate BETWEEN #{verifyDateStart} AND #{verifyDateEnd}
                </when>
                <when test="verifyDateStart != null">
                    AND p.verifyDate &gt;= #{verifyDateStart}
                </when>
                <when test="verifyDateEnd != null">
                    AND p.verifyDate &lt;= #{verifyDateEnd}
                </when>
            </choose>
        </where>
    </delete>

    <update id="updateMeterLoc" parameterType="com.abel.bigwater.model.zone.ZoneMeter">
        UPDATE bw_meter
        SET meterLoc = st_geomFromText(#{meterLoc})
        , updateBy = #{updateBy}
        , updateDate = now()
        <where>
            meterId = #{meterId}
            <if test="firmId != null">
                AND firmId = #{firmId}
            </if>
        </where>
    </update>

    <select id="selectMeterDma" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.zone.ZoneMeter">
        SELECT m.meterId
        , m.userCode
        , m.meterCode
        , m.meterName
        , m.meterOrder
        , m.extId
        , d.dmaId
        , d.dmaName
        , m.location
        , m.installDate
        , m.meterPulse
        , m.q1
        , m.q2
        , m.q3
        , m.q4
        , m.q1r
        , m.q2r
        , m.q3r
        , m.q4r
        , m.sizeId
        , m.sizeName
        , m.modelSize
        , m.typeId
        , m.userType
        , m.waterPrice
        , m.serviceArea
        , m.servicePopulation
        , m.contactNumber
        , m.chargable
        , m.firmId
        , m.meterBrandId
        , m.steelNo
        , m.remoteBrandId
        , m.rtuId
        , m.rtuCode
        , m.rtuAddr
        , m.rtuInstallDate
        , m.rtuInstallPerson
        , m.rtuContact
        , m.commCard
        , m.remoteModel
        , m.remoteMemo
        , m.commIsp
        , m.pressureRange
        , m.pressureMaxLimit
        , m.pressureMinLimit
        , m.powerType
        , m.meterStatus
        , m.adminMobile
        , st_asText(m.meterLoc::geometry) AS meterLoc
        , m.lastCalib
        , m.memo
        , m.decayId
        , m.createBy
        , m.createDate
        , m.updateBy
        , m.updateDate
        , dm.inOutput
        FROM bw_meter m
        LEFT JOIN bw_dma_meter dm on m.meterid = dm.meterid
        LEFT JOIN bw_dma d ON dm.dmaId = d.dmaId
        <where>
            <if test="keywords != null">
                to_tsvector('parser_name', m.meterName) @@ to_tsquery('parser_name', #{keywords})
                OR to_tsvector('parser_name', m.location) @@ to_tsquery('parser_name', #{keywords})
            </if>
            <choose>
                <when test="meterIdList != null and meterIdList.size != 0">
                    AND (m.meterId IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                    OR m.steelNo IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>)
                </when>
                <when test="meterId != null">
                    AND (m.meterId LIKE #{meterId} OR m.steelNo LIKE #{meterId})
                </when>
                <when test="excludeMeterIdList != null and excludeMeterIdList.size != 0">
                    AND m.meterId NOT IN
                    <foreach collection="excludeMeterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
            </choose>
            <if test="userCode != null">
                AND m.userCode LIKE #{userCode}
            </if>
            <if test="meterCode != null">
                AND m.meterCode LIKE #{meterCode}
            </if>
            <if test="meterName != null">
                AND m.meterName LIKE #{meterName}
            </if>
            <choose>
                <when test="extIdList != null and extIdList.size != 0">
                    AND m.extId IN
                    <foreach collection="extIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="extId != null">
                    AND m.extId = #{extId}
                </when>
                <when test="excludeExtIdList != null and excludeExtIdList.size != 0">
                    AND m.extId NOT IN
                    <foreach collection="excludeExtIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
            </choose>

            <choose>
                <when test="dmaIdList != null and dmaIdList.size != 0">
                    AND (d.dmaId IS NULL OR d.dmaId IN
                    <foreach collection="dmaIdList" item="did" open="(" close=")" separator=",">
                        #{did}
                    </foreach>
                    )
                </when>
                <when test="dmaId != null">
                    AND (d.dmaId IS NULL OR d.dmaId LIKE #{dmaId})
                </when>
            </choose>

            <if test="dmaName != null">
                AND (d.dmaName IS NULL OR d.dmaName LIKE #{dmaName})
            </if>

            <if test="sizeId != null">
                AND m.sizeId = #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="typeId == 'CHECK'">
                    AND m.typeId = 'CHECK'
                </when>
                <when test="typeId != null">
                    AND m.typeId = #{typeId}
                </when>
            </choose>
            <choose>
                <when test="installDate1 != null and installDate2 != null">
                    AND m.installDate BETWEEN #{installDate1} AND #{installDate2}
                </when>
                <when test="installDate1 != null">
                    AND m.installDate &gt;= #{installDate1}
                </when>
                <when test="installDate2 != null">
                    AND m.installDate &lt; #{installDate2}
                </when>
            </choose>
            <if test="location != null">
                AND m.location LIKE #{location}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="meterBrandName != null">
                AND m.meterBrandId LIKE #{meterBrandName}
            </if>
            <if test="remoteBrandId != null">
                AND m.remoteBrandId LIKE #{remoteBrandId}
            </if>
            <if test="firmId != null">
                AND m.firmId LIKE #{firmId}
            </if>
        </where>
        ORDER BY m.meterId
        LIMIT #{rows} OFFSET #{index}
    </select>

    <select id="selectMeterZone" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.zone.ZoneMeter">
        SELECT m.meterId
        , m.userCode
        , m.meterCode
        , m.meterName
        , m.meterOrder
        , m.extId
        , z.zoneId
        , z.zoneName
        , m.location
        , m.installDate
        , m.meterPulse
        , m.q1
        , m.q2
        , m.q3
        , m.q4
        , m.q1r
        , m.q2r
        , m.q3r
        , m.q4r
        , m.sizeId
        , m.sizeName
        , m.modelSize
        , m.typeId
        , m.userType
        , m.waterPrice
        , m.serviceArea
        , m.servicePopulation
        , m.contactNumber
        , m.chargable
        , m.firmId
        , m.meterBrandId
        , m.steelNo
        , m.remoteBrandId
        , m.rtuId
        , m.rtuCode
        , m.rtuAddr
        , m.rtuInstallDate
        , m.rtuInstallPerson
        , m.rtuContact
        , m.commCard
        , m.remoteModel
        , m.remoteMemo
        , m.commIsp
        , m.pressureRange
        , m.pressureMaxLimit
        , m.pressureMinLimit
        , m.powerType
        , m.meterStatus
        , m.adminMobile
        , st_asText(m.meterLoc::geometry) AS meterLoc
        , m.lastCalib
        , m.memo
        , m.decayId
        , m.createBy
        , m.createDate
        , m.updateBy
        , m.updateDate
        , zm.inOutput
        FROM bw_meter m
        LEFT JOIN bw_zone_meter zm on m.meterId = zm.meterId
        LEFT JOIN bw_zone z on z.zoneId = zm.zoneId
        <where>
            <if test="keywords != null">
                to_tsvector('parser_name', m.meterName) @@ to_tsquery('parser_name', #{keywords})
                OR to_tsvector('parser_name', m.location) @@ to_tsquery('parser_name', #{keywords})
            </if>
            <choose>
                <when test="meterIdList != null and meterIdList.size != 0">
                    AND (m.meterId IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                    OR m.steelNo IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>)
                </when>
                <when test="meterId != null">
                    AND (m.meterId LIKE #{meterId} OR m.steelNo LIKE #{meterId})
                </when>
            </choose>
            <if test="userCode != null">
                AND m.userCode LIKE #{userCode}
            </if>
            <if test="meterCode != null">
                AND m.meterCode LIKE #{meterCode}
            </if>
            <if test="meterName != null">
                AND m.meterName LIKE #{meterName}
            </if>
            <choose>
                <when test="extIdList != null and extIdList.size != 0">
                    AND m.extId IN
                    <foreach collection="extIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="extId != null">
                    AND m.extId = #{extId}
                </when>
            </choose>

            <choose>
                <when test="zoneIdList != null and zoneIdList.size != 0">
                    AND z.zoneId IN
                    <foreach collection="zoneIdList" item="did" open="(" close=")" separator=",">
                        #{did}
                    </foreach>
                </when>
                <when test="zoneId != null">
                    AND z.zoneId LIKE #{zoneId}
                </when>
            </choose>

            <if test="zoneName != null">
                AND z.zoneName LIKE #{zoneName}
            </if>

            <if test="sizeId != null">
                AND m.sizeId = #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="typeId == 'CHECK'">
                    AND m.typeId = 'CHECK'
                </when>
                <when test="typeId != null">
                    AND m.typeId = #{typeId}
                </when>
            </choose>
            <choose>
                <when test="installDate1 != null and installDate2 != null">
                    AND m.installDate BETWEEN #{installDate1} AND #{installDate2}
                </when>
                <when test="installDate1 != null">
                    AND m.installDate &gt;= #{installDate1}
                </when>
                <when test="installDate2 != null">
                    AND m.installDate &lt; #{installDate2}
                </when>
            </choose>
            <if test="location != null">
                AND m.location LIKE #{location}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="remoteBrandId != null">
                AND m.remoteBrandId LIKE #{remoteBrandId}
            </if>
            <if test="firmId != null">
                AND m.firmId LIKE #{firmId}
            </if>
        </where>
        ORDER BY m.meterId
        LIMIT #{rows} OFFSET #{index}
    </select>

    <select id="statMeterSize" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.stat.MeterSizeStat">
        SELECT COALESCE(m.sizeId, '0') AS sizeId
        , COALESCE(m.sizeName, '0') AS sizeName
        , COUNT(1) meterCount
        FROM bw_meter m
        <where>
            <choose>
                <when test="meterIdList != null and meterIdList.size != 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="userCode != null">
                AND m.userCode LIKE #{userCode}
            </if>
            <if test="meterName != null">
                AND m.meterName LIKE #{meterName}
            </if>

            <choose>
                <when test="extIdList != null and extIdList.size != 0">
                    AND m.extId IN
                    <foreach collection="extIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="extId != null">
                    AND m.extId = #{extId}
                </when>
            </choose>

            <choose>
                <when test="dmaIdList != null and dmaIdList.size != 0">
                    AND d.dmaId IN
                    <foreach collection="dmaIdList" item="did" open="(" close=")" separator=",">
                        #{did}
                    </foreach>
                </when>
                <when test="dmaId != null">
                    AND d.dmaId LIKE #{dmaId}
                </when>
            </choose>

            <if test="dmaName != null">
                AND d.dmaName LIKE #{dmaName}
            </if>

            <choose>
                <when test="typeId == 'CHECK'">
                    AND m.typeId = 'CHECK'
                </when>
                <when test="typeId != null">
                    AND m.typeId = #{typeId}
                </when>
            </choose>

            <choose>
                <when test="installDate1 != null and installDate2 != null">
                    AND m.installDate BETWEEN #{installDate1} AND #{installDate2}
                </when>
                <when test="installDate1 != null">
                    AND m.installDate &gt;= #{installDate1}
                </when>
                <when test="installDate2 != null">
                    AND m.installDate &lt; #{installDate2}
                </when>
            </choose>

            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="remoteBrandId != null">
                AND m.remoteBrandId LIKE #{remoteBrandId}
            </if>

            <if test="firmId != null">
                AND m.firmId LIKE #{firmId}
            </if>
        </where>
        GROUP BY m.sizeId, m.sizeName
        ORDER BY m.sizeId
    </select>

    <select id="statMeterFirm" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.stat.MeterFirmStat">
        SELECT f.firmId
        , f.firmName
        , COALESCE(m1.meterCount, 0) AS meterCount
        FROM bw_firm f

        LEFT JOIN (
        SELECT m.firmId
        , COUNT(1) meterCount
        FROM bw_meter m
        <where>
            <choose>
                <when test="meterIdList != null and meterIdList.size != 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="userCode != null">
                AND m.userCode LIKE #{userCode}
            </if>
            <if test="meterName != null">
                AND m.meterName LIKE #{meterName}
            </if>

            <choose>
                <when test="extIdList != null and extIdList.size != 0">
                    AND m.extId IN
                    <foreach collection="extIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="extId != null">
                    AND m.extId = #{extId}
                </when>
            </choose>

            <choose>
                <when test="dmaIdList != null and dmaIdList.size != 0">
                    AND d.dmaId IN
                    <foreach collection="dmaIdList" item="did" open="(" close=")" separator=",">
                        #{did}
                    </foreach>
                </when>
                <when test="dmaId != null">
                    AND d.dmaId LIKE #{dmaId}
                </when>
            </choose>

            <if test="dmaName != null">
                AND d.dmaName LIKE #{dmaName}
            </if>

            <choose>
                <when test="typeId == 'CHECK'">
                    AND m.typeId = 'CHECK'
                </when>
                <when test="typeId != null">
                    AND m.typeId = #{typeId}
                </when>
            </choose>

            <choose>
                <when test="installDate1 != null and installDate2 != null">
                    AND m.installDate BETWEEN #{installDate1} AND #{installDate2}
                </when>
                <when test="installDate1 != null">
                    AND m.installDate &gt;= #{installDate1}
                </when>
                <when test="installDate2 != null">
                    AND m.installDate &lt; #{installDate2}
                </when>
            </choose>

            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="remoteBrandId != null">
                AND m.remoteBrandId LIKE #{remoteBrandId}
            </if>

            <if test="firmId != null">
                AND m.firmId LIKE #{firmId}
            </if>
        </where>
        GROUP BY m.firmId
        ) m1 ON f.firmId = m1.firmId
        <where>
            <if test="firmId != null">
                AND f.firmId LIKE #{firmId}
            </if>
        </where>
        ORDER BY f.firmId
    </select>

    <select id="statFirmSize" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.stat.MeterFirmStat">
        SELECT f.firmId
             , f.firmName
             , m1.sizeId
             , m1.sizeName
             , COALESCE(m1.meterCount, 0) AS meterCount
        FROM bw_firm f

        LEFT JOIN (
        SELECT m.firmId
             , m.sizeId
             , m.sizeName
             , COUNT(1) meterCount
        FROM bw_meter m
        <where>
            <choose>
                <when test="meterIdList != null and meterIdList.size != 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="userCode != null">
                AND m.userCode LIKE #{userCode}
            </if>
            <if test="meterName != null">
                AND m.meterName LIKE #{meterName}
            </if>

            <choose>
                <when test="extIdList != null and extIdList.size != 0">
                    AND m.extId IN
                    <foreach collection="extIdList" index="idx" item="mid" open="(" close=")" separator=",">
                        #{mid}
                    </foreach>
                </when>
                <when test="extId != null">
                    AND m.extId = #{extId}
                </when>
            </choose>

            <choose>
                <when test="dmaIdList != null and dmaIdList.size != 0">
                    AND d.dmaId IN
                    <foreach collection="dmaIdList" item="did" open="(" close=")" separator=",">
                        #{did}
                    </foreach>
                </when>
                <when test="dmaId != null">
                    AND d.dmaId LIKE #{dmaId}
                </when>
            </choose>

            <if test="dmaName != null">
                AND d.dmaName LIKE #{dmaName}
            </if>

            <choose>
                <when test="typeId == 'CHECK'">
                    AND m.typeId = 'CHECK'
                </when>
                <when test="typeId != null">
                    AND m.typeId = #{typeId}
                </when>
            </choose>

            <choose>
                <when test="installDate1 != null and installDate2 != null">
                    AND m.installDate BETWEEN #{installDate1} AND #{installDate2}
                </when>
                <when test="installDate1 != null">
                    AND m.installDate &gt;= #{installDate1}
                </when>
                <when test="installDate2 != null">
                    AND m.installDate &lt; #{installDate2}
                </when>
            </choose>

            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="remoteBrandId != null">
                AND m.remoteBrandId LIKE #{remoteBrandId}
            </if>

            <if test="firmId != null">
                AND m.firmId LIKE #{firmId}
            </if>
        </where>
        GROUP BY m.firmId
                 , m.sizeId
                 , m.sizeName
        ) m1 ON f.firmId = m1.firmId
        <where>
            <if test="firmId != null">
                AND f.firmId LIKE #{firmId}
            </if>
        </where>
        ORDER BY f.firmId
               , m1.sizeId
    </select>

    <select id="selectDma" parameterType="com.abel.bigwater.api.MeterParam"
            resultType="com.abel.bigwater.model.BwDma">
        SELECT dmaId
        , dmaName
        , location
        , st_astext(dmaLoc::geometry) AS dmaLoc
        , st_astext(dmaregion::geometry) AS dmaRegion
        , firmId
        , dmaType
        , showType
        , legalLnf
        , status
        , sumUser
        , cntUser
        , avgMonthWater
        , devMonthWater
        , cntMonth
        , avgMnfTotal
        , devMnfTotal
        , cntMnf
        , onlineDate
        , memo
        , createBy
        , createDate
        , updateBy
        , updateDate
        FROM bw_dma d
        <where>
            <choose>
                <when test="dmaIdList != null">
                    AND d.dmaId IN
                    <foreach collection="dmaIdList" item="did" open="(" close=")" separator=",">
                        #{did}
                    </foreach>
                </when>
                <when test="dmaId != null">
                    AND d.dmaId LIKE #{dmaId}
                </when>
            </choose>

            <if test="firmId != null">
                AND d.firmId LIKE #{firmId}
            </if>
        </where>
        ORDER BY dmaId
    </select>

    <insert id="insertDma" parameterType="com.abel.bigwater.model.BwDma">
        INSERT INTO bw_dma( dmaId
        , dmaName
        , location
        <include refid="dmaGeom"></include>
        , firmId
        , dmaType
        , showType
        , legalLnf
        , status
        , sumUser
        , cntUser
        , avgMonthWater
        , devMonthWater
        , cntMonth
        , avgMnfTotal
        , devMnfTotal
        , cntMnf
        , onlineDate
        , memo
        , createBy
        , createDate
        , updateBy
        , updateDate)
        VALUES ( #{dmaId}
        , #{dmaName}
        , #{location}
        <include refid="dmaValues"></include>
        , #{firmId}
        , #{dmaType}
        , #{showType}
        , #{legalLnf}
        , #{status}
        , #{sumUser}
        , #{cntUser}
        , #{avgMonthWater}
        , #{devMonthWater}
        , #{cntMonth}
        , #{avgMnfTotal}
        , #{devMnfTotal}
        , #{cntMnf}
        , #{onlineDate}
        , #{memo}
        , #{createBy}
        , now()
        , #{updateBy}
        , now())
    </insert>

    <sql id="dmaGeom">
        <if test="dmaLoc != null">
            , dmaLoc
        </if>
        <if test="dmaRegion != null">
            , dmaRegion
        </if>
    </sql>

    <sql id="dmaValues">
        <if test="dmaLoc != null">
            , st_geomFromText(#{dmaLoc})
        </if>
        <if test="dmaRegion != null">
            , st_geomFromText(#{dmaRegion})
        </if>
    </sql>

    <update id="updateDma" parameterType="com.abel.bigwater.model.BwDma">
        UPDATE bw_dma
        <set>
        SET dmaName       = #{dmaName}
          , location      = #{location}
          <if test="dmaLoc != null">
          , dmaLoc        = st_geomFromText(#{dmaLoc})
          </if>
          <if test="dmaRegion != null">
          , dmaRegion     = st_geomfromtext(#{dmaRegion})
          </if>
          , firmId        = #{firmId}
          , dmaType       = #{dmaType}
          , showType      = #{showType}
          , legalLnf      = #{legalLnf}
          , status        = #{status}
          , sumUser       = #{sumUser}
          , cntUser       = #{cntUser}
          , avgMonthWater = #{avgMonthWater}
          , devMonthWater = #{devMonthWater}
          , cntMonth      = #{cntMonth}
          , avgMnfTotal   = #{avgMnfTotal}
          , devMnfTotal   = #{devMnfTotal}
          , cntMnf        = #{cntMnf}
          , onlineDate    = #{onlineDate}
          , memo          = #{memo}
          , updateBy      = #{updateBy}
          , updateDate    = now()
        </set>
        WHERE dmaId = #{dmaId}
    </update>

    <delete id="deleteDma" parameterType="com.abel.bigwater.model.BwDma">
        DELETE
        FROM bw_dma
        WHERE dmaId = #{dmaId}
          AND firmId LIKE #{firmId}
    </delete>

    <insert id="linkMeterDma" parameterType="com.abel.bigwater.model.BwDma">
        INSERT INTO bw_dma_meter(
        dmaId
        , meterId
        , inOutput)
        VALUES
        <foreach collection="meterList" separator="," item="meter">
            (#{dmaId}
            , #{meter.meterId}
            , #{meter.inOutput})
        </foreach>
    </insert>

    <delete id="detachMeterDma" parameterType="com.abel.bigwater.model.BwDma">
        DELETE FROM bw_dma_meter
        USING bw_dma_meter bdm
        JOIN bw_dma d ON d.dmaid = bdm.dmaid
        <where>
            bdm.dmaId = #{dmaId}
            AND bdm.meterId IN
            <foreach collection="meterList" open="(" close=")" separator="," item="meter">
                #{meter.meterId}
            </foreach>
            <if test="firmId != null">
                AND d.firmId LIKE #{firmId}
            </if>
        </where>
    </delete>
</mapper>