<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离
注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用了
,namespace=mapper接口地址
 -->
<mapper namespace="com.abel.bigwater.mapper.EffMapper">
    <select id="listEffTask" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.eff.EffTask">
        SELECT taskId
        , taskName
        , createBy
        , createDate
        , firmId
        , firmName
        , meterCount
        , taskMemo
        , taskStart
        , taskEnd
        , periodType
        , runTime
        , runDuration
        , taskResult
        , totalWater
        , totalEff
        , realWater
        , deprecated
        FROM bw_eff_task t
        <where>
            <if test="firmId != null">
                t.firmId LIKE #{firmId}
            </if>
            <if test="taskId != null">
                AND t.taskId = #{taskId}
            </if>
            <if test="periodType != null">
                AND t.periodType LIKE #{periodType}
            </if>

            <choose>
                <when test="createDateStart != null and createDateEnd != null">
                    AND t.createDate BETWEEN #{createDateStart} AND #{createDateEnd}
                </when>
                <when test="createDate != null">
                    AND t.createDate = #{createDate}
                </when>
                <when test="createDateStart != null">
                    AND t.createDate &gt;= #{createDateStart}
                </when>
                <when test="createDateEnd != null">
                    AND t.createDate &lt;= #{createDateEnd}
                </when>
            </choose>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND t.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND t.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND t.taskEnd = #{taskEnd}
                </when>
            </choose>

            <choose>
                <when test="runTime1 != null and runTime2 != null">
                    AND t.runTime BETWEEN #{runTime1} AND #{runTime2}
                </when>
                <when test="runTime != null">
                    AND t.runTime = #{runTime}
                </when>
                <when test="runTime1 != null">
                    AND t.runTime &gt;= #{runTime1}
                </when>
                <when test="runTime2 != null">
                    AND t.runTime &lt;= #{runTime2}
                </when>
            </choose>
        </where>
    </select>

    <insert id="createEffTask" parameterType="com.abel.bigwater.model.eff.EffTask"
            useGeneratedKeys="true" keyProperty="taskId" keyColumn="taskid">
        INSERT INTO bw_eff_task( taskName
                               , createBy
                               , createDate
                               , firmId
                               , firmName
                               , meterCount
                               , taskMemo
                               , taskStart
                               , taskEnd
                               , periodType
                               , runTime
                               , runDuration
                               , taskResult
                               , totalWater
                               , totalEff
                               , realWater
                               , deprecated)
        VALUES ( #{taskName}
               , #{createBy}
               , CURRENT_TIMESTAMP
               , #{firmId}
               , #{firmName}
               , #{meterCount}
               , #{taskMemo}
               , #{taskStart}
               , #{taskEnd}
               , #{periodType}
               , #{runTime}
               , #{runDuration}
               , #{taskResult}
               , #{totalWater}
               , #{totalEff}
               , #{realWater}
               , #{deprecated})
    </insert>

    <delete id="deleteEffTask" parameterType="com.abel.bigwater.api.EffParam">
        DELETE FROM bw_eff_task t
        <where>
            <if test="firmId != null">
                t.firmId LIKE #{firmId}
            </if>
            <if test="taskId != null">
                AND t.taskId = #{taskId}
            </if>
            <if test="periodType != null">
                AND t.periodType LIKE #{periodType}
            </if>
        </where>
    </delete>

    <select id="listEffMeter" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.eff.EffMeter">
        SELECT m.effId
        , m.taskId
        , t.taskName
        , m.meterId
        , m.meterName
        , m.taskName
        , m.taskStart
        , m.taskEnd
        , m.periodType
        , m.runTime
        , m.runDuration
        , m.taskResult
        , m.meterWater
        , m.q0v
        , m.q1v
        , m.q2v
        , m.q3v
        , m.q4v
        , m.qtv
        , m.meterEff
        , m.realWater
        , m.startTime
        , m.endTime
        , m.stdDays
        , m.startFwd
        , m.endFwd
        , m.powerType
        , m.meterBrandId
        , m.sizeId
        , m.sizeName
        , m.modelSize
        , m.dataRows
        , m.decayEff
        , m.srcError
        , m.q4
        , m.q3
        , m.q3toq1
        , m.q4toq3
        , m.q2toq1
        , m.qr1
        , m.qr2
        , m.qr3
        , m.qr4

        , bm.location
        , bm.firmId
        , bf.firmName
        FROM bw_eff_meter m
        LEFT JOIN bw_eff_task t on m.taskId = t.taskId
        LEFT JOIN bw_meter bm ON m.meterId = bm.meterId
        LEFT JOIN bw_firm bf ON bf.firmId = bm.firmId

        <where>
            <if test="firmId != null">
                bm.firmId LIKE #{firmId}
            </if>
            <if test="effId != null">
                AND m.effId = #{effId}
            </if>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            <choose>
                <when test="periodType != null">
                    AND m.periodType LIKE #{periodType}
                </when>
                <otherwise>
                    AND m.periodType = 'Day'
                </otherwise>
            </choose>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>

            <choose>
                <when test="createDateStart != null and createDateEnd != null">
                    AND t.createDate BETWEEN #{createDateStart} AND #{createDateEnd}
                </when>
                <when test="createDate != null">
                    AND t.createDate = #{createDate}
                </when>
                <when test="createDateStart != null">
                    AND t.createDate &gt;= #{createDateStart}
                </when>
                <when test="createDateEnd != null">
                    AND t.createDate &lt;= #{createDateEnd}
                </when>
            </choose>

            <choose>
                <when test="runTime1 != null and runTime2 != null">
                    AND t.runTime BETWEEN #{runTime1} AND #{runTime2}
                </when>
                <when test="runTime != null">
                    AND t.runTime = #{runTime}
                </when>
                <when test="runTime1 != null">
                    AND t.runTime &gt;= #{runTime1}
                </when>
                <when test="runTime2 != null">
                    AND t.runTime &lt;= #{runTime2}
                </when>
            </choose>
        </where>
        LIMIT #{rows} OFFSET #{index}
    </select>

    <select id="listEffFailure" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.eff.EffMeter">
        SELECT m.effId
        , m.taskId
        , t.taskName
        , m.meterId
        , m.meterName
        , m.taskName
        , m.taskStart
        , m.taskEnd
        , m.periodType
        , m.runTime
        , m.runDuration
        , m.taskResult
        , m.checkResult
        , m.meterWater
        , m.q0v
        , m.q1v
        , m.q2v
        , m.q3v
        , m.q4v
        , m.qtv
        , m.meterEff
        , m.realWater
        , m.startFwd
        , m.endFwd
        , m.powerType
        , m.meterBrandId
        , m.sizeId
        , m.sizeName
        , m.modelSize
        , m.dataRows
        , m.decayEff
        , m.srcError
        , m.q4
        , m.q3
        , m.q3toq1
        , m.q4toq3
        , m.q2toq1
        , m.qr1
        , m.qr2
        , m.qr3
        , m.qr4

        , bm.location
        , bm.firmId
        , bf.firmName
        FROM bw_eff_failure m
        LEFT JOIN bw_eff_task t on m.taskId = t.taskId
        LEFT JOIN bw_meter bm ON m.meterId = bm.meterId
        LEFT JOIN bw_firm bf ON bm.firmId = bf.firmId

        <where>
            <if test="firmId != null">
                bm.firmId LIKE #{firmId}
            </if>
            <if test="taskResult != null">
                AND m.taskResult LIKE #{taskResult}
            </if>

            <if test="effId != null">
                AND m.effId = #{effId}
            </if>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            <choose>
                <when test="periodType != null">
                    AND m.periodType LIKE #{periodType}
                </when>
                <otherwise>
                    AND m.periodType = 'Day'
                </otherwise>
            </choose>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>

            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>

            <choose>
                <when test="createDateStart != null and createDateEnd != null">
                    AND t.createDate BETWEEN #{createDateStart} AND #{createDateEnd}
                </when>
                <when test="createDate != null">
                    AND t.createDate = #{createDate}
                </when>
                <when test="createDateStart != null">
                    AND t.createDate &gt;= #{createDateStart}
                </when>
                <when test="createDateEnd != null">
                    AND t.createDate &lt;= #{createDateEnd}
                </when>
            </choose>

            <choose>
                <when test="runTime1 != null and runTime2 != null">
                    AND t.runTime BETWEEN #{runTime1} AND #{runTime2}
                </when>
                <when test="runTime != null">
                    AND t.runTime = #{runTime}
                </when>
                <when test="runTime1 != null">
                    AND t.runTime &gt;= #{runTime1}
                </when>
                <when test="runTime2 != null">
                    AND t.runTime &lt;= #{runTime2}
                </when>
            </choose>
        </where>
    </select>

    <select id="matchMeter" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.eff.EffMeter">
        SELECT m.effId
        , m.taskId
        , m.meterId
        , m.meterName
        , m.taskName
        , #{taskStart} taskStart
        , #{taskEnd} taskEnd
        , m.periodType
        , m.runTime
        , m.runDuration
        , m.taskResult
        , m.meterWater
        , m.q0v
        , m.q1v
        , m.q2v
        , m.q3v
        , m.q4v
        , m.qtv
        , m.meterEff
        , m.realWater
        , m.startFwd
        , m.endFwd
        , m.powerType
        , m.meterBrandId
        , m.sizeId
        , m.sizeName
        , m.modelSize
        , bm.firmId
        , bf.firmName
        , bm.location
        , m.dataRows
        , m.decayEff
        , m.q4
        , m.q3
        , m.q3toq1
        , m.q4toq3
        , m.q2toq1
        , m.qr1
        , m.qr2
        , m.qr3
        , m.qr4
        FROM (
        SELECT
        meterId
        , MAX(effId) effId
        FROM bw_eff_meter
        <where>
            <if test="taskId != null">
                AND taskId = #{taskId}
            </if>
            <if test="periodType != null">
                AND periodType LIKE #{periodType}
            </if>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY meterId
        ) m1
        JOIN bw_eff_meter m ON m.effId = m1.effId
        LEFT JOIN bw_meter bm ON m.meterId = bm.meterId
        LEFT JOIN bw_firm bf ON bm.firmId = bf.firmId
        <where>
            <if test="firmId != null">
                AND bm.firmId LIKE #{firmId}
            </if>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            <if test="periodType != null">
                AND m.periodType LIKE #{periodType}
            </if>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>

            <if test="matchQ2v > 0.0">
                AND m.q2v >= m.meterWater * #{matchQ2v} / 100.0
            </if>
        </where>
    </select>

    <select id="listEffRange" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.DataRange">
        SELECT
        bm.firmId
        , em.meterId
        , bm.meterName
        , MIN(em.taskStart) minTime
        , MAX(em.taskStart) maxTime
        , COUNT(1) dataRows
        , MIN(em.effId) minDataId
        , MAX(em.effId) maxDataId
        FROM bw_eff_meter em
        LEFT JOIN bw_eff_task et ON em.taskId = et.taskId
        LEFT JOIN bw_meter bm ON em.meterId = bm.meterId
        <where>
            <choose>
                <when test="meterId != null">
                    em.meterId LIKE #{meterId}
                </when>
                <when test="meterIdList != null">
                    em.meterId IN
                    <foreach collection="meterIdList" item="mid" open="(" separator="," close=")">
                        #{mid}
                    </foreach>
                </when>
            </choose>

            <if test="firmId != null">
                AND et.firmId LIKE #{firmId}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND em.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND em.taskStart &gt;= #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND em.taskStart &lt;= #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY
        bm.firmId
        , em.meterId
        , bm.meterName
    </select>

    <insert id="insertEffMeter" parameterType="com.abel.bigwater.api.EffParam">
        INSERT INTO bw_eff_meter( taskId
        , meterId
        , meterName
        , taskName
        , taskStart
        , taskEnd
        , periodType
        , runTime
        , runDuration
        , taskResult
        , meterWater
        , q0v
        , q1v
        , q2v
        , q3v
        , q4v
        , qtv
        , meterEff
        , realWater
        , startTime
        , endTime
        , stdDays
        , startFwd
        , endFwd
        , powerType
        , meterBrandId
        , sizeId
        , sizeName
        , modelSize
        , dataRows
        , decayEff
        , srcError
        , q4
        , q3
        , q3toq1
        , q4toq3
        , q2toq1
        , qr1
        , qr2
        , qr3
        , qr4)
        VALUES
        <foreach collection="meterList" item="m1" separator=",">
            (#{m1.taskId}
            , #{m1.meterId}
            , #{m1.meterName}
            , #{m1.taskName}
            , #{m1.taskStart}
            , #{m1.taskEnd}
            , #{m1.periodType}
            , #{m1.runTime}
            , #{m1.runDuration}
            , #{m1.taskResult}
            , #{m1.meterWater}
            , #{m1.q0v}
            , #{m1.q1v}
            , #{m1.q2v}
            , #{m1.q3v}
            , #{m1.q4v}
            , #{m1.qtv}
            , #{m1.meterEff}
            , #{m1.realWater}
            , #{m1.startTime}
            , #{m1.endTime}
            , #{m1.stdDays}
            , #{m1.startFwd}
            , #{m1.endFwd}
            , #{m1.powerType}
            , #{m1.meterBrandId}
            , #{m1.sizeId}
            , #{m1.sizeName}
            , #{m1.modelSize}
            , #{m1.dataRows}
            , #{m1.decayEff}
            , #{m1.srcError}
            , #{m1.q4}
            , #{m1.q3}
            , #{m1.q3toq1}
            , #{m1.q4toq3}
            , #{m1.q2toq1}
            , #{m1.qr1}
            , #{m1.qr2}
            , #{m1.qr3}
            , #{m1.qr4})
        </foreach>
    </insert>

    <insert id="insertEffMeterSingle" parameterType="com.abel.bigwater.model.eff.EffMeter"
            useGeneratedKeys="true" keyProperty="effId" keyColumn="effid">
        INSERT INTO bw_eff_meter( taskId
        , meterId
        , meterName
        , taskName
        , taskStart
        , taskEnd
        , periodType
        , runTime
        , runDuration
        , taskResult
        , meterWater
        , q0v
        , q1v
        , q2v
        , q3v
        , q4v
        , qtv
        , meterEff
        , realWater
        , startTime
        , endTime
        , stdDays
        , startFwd
        , endFwd
        , powerType
        , meterBrandId
        , sizeId
        , sizeName
        , modelSize
        , dataRows
        , decayEff
        , srcError
        , q4
        , q3
        , q3toq1
        , q4toq3
        , q2toq1
        , qr1
        , qr2
        , qr3
        , qr4)
        VALUES
            ( #{taskId}
            , #{meterId}
            , #{meterName}
            , #{taskName}
            , #{taskStart}
            , #{taskEnd}
            , #{periodType}
            , #{runTime}
            , #{runDuration}
            , #{taskResult}
            , #{meterWater}
            , #{q0v}
            , #{q1v}
            , #{q2v}
            , #{q3v}
            , #{q4v}
            , #{qtv}
            , #{meterEff}
            , #{realWater}
            , #{startTime}
            , #{endTime}
            , #{stdDays}
            , #{startFwd}
            , #{endFwd}
            , #{powerType}
            , #{meterBrandId}
            , #{sizeId}
            , #{sizeName}
            , #{modelSize}
            , #{dataRows}
            , #{decayEff}
            , #{srcError}
            , #{q4}
            , #{q3}
            , #{q3toq1}
            , #{q4toq3}
            , #{q2toq1}
            , #{qr1}
            , #{qr2}
            , #{qr3}
            , #{qr4}
            )
    </insert>

    <insert id="insertEffFailureSingle" parameterType="com.abel.bigwater.model.eff.EffMeter"
            useGeneratedKeys="true" keyProperty="effId" keyColumn="effid">
        INSERT INTO bw_eff_failure ( taskId
                                , meterId
                                , meterName
                                , taskName
                                , taskStart
                                , taskEnd
                                , periodType
                                , runTime
                                , runDuration
                                , taskResult
                                , checkResult
                                , meterWater
                                , q0v
                                , q1v
                                , q2v
                                , q3v
                                , q4v
                                , qtv
                                , meterEff
                                , realWater
                                , startTime
                                , endTime
                                , stdDays
                                , startFwd
                                , endFwd
                                , powerType
                                , meterBrandId
                                , sizeId
                                , sizeName
                                , modelSize
                                , dataRows
                                , decayEff
                                , srcError
                                , q4
                                , q3
                                , q3toq1
                                , q4toq3
                                , q2toq1
                                , qr1
                                , qr2
                                , qr3
                                , qr4)
        VALUES
        ( #{taskId}
        , #{meterId}
        , #{meterName}
        , #{taskName}
        , #{taskStart}
        , #{taskEnd}
        , #{periodType}
        , #{runTime}
        , #{runDuration}
        , #{taskResult}
        , #{checkResult}
        , #{meterWater}
        , #{q0v}
        , #{q1v}
        , #{q2v}
        , #{q3v}
        , #{q4v}
        , #{qtv}
        , #{meterEff}
        , #{realWater}
        , #{startTime}
        , #{endTime}
        , #{stdDays}
        , #{startFwd}
        , #{endFwd}
        , #{powerType}
        , #{meterBrandId}
        , #{sizeId}
        , #{sizeName}
        , #{modelSize}
        , #{dataRows}
        , #{decayEff}
        , #{srcError}
        , #{q4}
        , #{q3}
        , #{q3toq1}
        , #{q4toq3}
        , #{q2toq1}
        , #{qr1}
        , #{qr2}
        , #{qr3}
        , #{qr4}
        )
    </insert>

    <insert id="buildEffMeterMonth" parameterType="com.abel.bigwater.api.EffParam">
    INSERT INTO bw_eff_meter( taskId
    , meterId
    , meterName
    , taskName
    , taskStart
    , taskEnd
    , periodType
    , runTime
    , runDuration
    , taskResult
    , meterWater
    , q0v
    , q1v
    , q2v
    , q3v
    , q4v
    , qtv
    , meterEff
    , realWater
    , startTime
    , endTime
    , stdDays
    , startFwd
    , endFwd
    , powerType
    , meterBrandId
    , sizeId
    , sizeName
    , modelSize
    , dataRows
    , decayEff
    , q4
    , q3
    , q3toq1
    , q4toq3
    , q2toq1
    , qr1
    , qr2
    , qr3
    , qr4)
    SELECT m.taskId
         , m.meterId
         , m.meterName
         , m.taskName
         , m2.taskStart
         , (m2.taskStart + interval '1month') taskEnd
         , 'Month' periodType
         , m.runTime
         , m2.runDuration
         , m.taskResult
         , m2.meterWater
         , m2.q0v
         , m2.q1v
         , m2.q2v
         , m2.q3v
         , m2.q4v
         , m2.qtv
         , (case when (m2.realWater &lt; 0.001) then 0.0 else (m2.meterWater / m2.realWater) * 100 end) AS meterEff
         , m2.realWater
         , m2.startTime
         , m2.endTime
         , m2.stdDays
         , m2.startFwd
         , m2.endFwd
         , m.powerType
         , m.meterBrandId
         , m.sizeId
         , m.sizeName
         , m.modelSize
         , m2.dataRows
         , m.decayEff
         , m.q4
         , m.q3
         , m.q3toq1
         , m.q4toq3
         , m.q2toq1
         , m.qr1
         , m.qr2
         , m.qr3
         , m.qr4
        FROM (
             SELECT
                 meterId
                  , MAX(effId) effId
             FROM bw_eff_meter
            <where>
                <if test="taskId != null">
                    AND taskId = #{taskId}
                </if>
                AND periodType = 'Day'

                <choose>
                    <when test="meterIdList != null and meterIdList.size > 0">
                        AND meterId IN
                        <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                            #{mid}
                        </foreach>
                    </when>
                    <when test="meterId != null">
                        AND meterId LIKE #{meterId}
                    </when>
                </choose>

                <if test="powerType != null">
                    AND powerType LIKE #{powerType}
                </if>
                <if test="meterBrandId != null">
                    AND meterBrandId LIKE #{meterBrandId}
                </if>
                <if test="sizeId != null">
                    AND sizeId LIKE #{sizeId}
                </if>
                <if test="modelSize != null">
                    AND modelSize LIKE #{modelSize}
                </if>

                <choose>
                    <when test="taskStart != null and taskEnd != null">
                        AND taskStart BETWEEN #{taskStart} AND #{taskEnd}
                    </when>
                    <when test="taskStart != null">
                        AND taskStart = #{taskStart}
                    </when>
                    <when test="taskEnd != null">
                        AND taskEnd = #{taskEnd}
                    </when>
                </choose>
            </where>
            GROUP BY meterId
             ) m1
        JOIN bw_eff_meter m ON m.effId = m1.effId
        JOIN (
             SELECT
                 m.meterId
                  , date_trunc('month', m.taskStart) taskStart
                  , SUM(runDuration) runDuration
                  , SUM(meterWater) meterWater
                  , SUM(q0v) q0v
                  , SUM(q1v) q1v
                  , SUM(q2v) q2v
                  , SUM(q3v) q3v
                  , SUM(q4v) q4v
                  , SUM(qtv) qtv
                  , SUM(realWater) realWater
                  , MIN(startTime) startTime
                  , MAX(endTime) endTime
                  , SUM(stdDays) stdDays
                  , MIN(startFwd) startFwd
                  , MAX(endFwd) endFwd
                  , COUNT(1) dataRows
            FROM bw_eff_meter m
            JOIN (
                SELECT meterId
                , taskStart
                , MAX(effId) effId
                FROM bw_eff_meter
                <where>
                    <if test="taskId != null">
                        AND taskId = #{taskId}
                    </if>
                    AND periodType = 'Day'

                    <choose>
                        <when test="meterIdList != null and meterIdList.size > 0">
                            AND meterId IN
                            <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                                #{mid}
                            </foreach>
                        </when>
                        <when test="meterId != null">
                            AND meterId LIKE #{meterId}
                        </when>
                    </choose>

                    <if test="powerType != null">
                        AND powerType LIKE #{powerType}
                    </if>
                    <if test="meterBrandId != null">
                        AND meterBrandId LIKE #{meterBrandId}
                    </if>
                    <if test="sizeId != null">
                        AND sizeId LIKE #{sizeId}
                    </if>
                    <if test="modelSize != null">
                        AND modelSize LIKE #{modelSize}
                    </if>

                    <choose>
                        <when test="taskStart != null and taskEnd != null">
                            AND taskStart BETWEEN #{taskStart} AND #{taskEnd}
                        </when>
                        <when test="taskStart != null">
                            AND taskStart = #{taskStart}
                        </when>
                        <when test="taskEnd != null">
                            AND taskEnd = #{taskEnd}
                        </when>
                    </choose>
                </where>
                GROUP BY meterId
                       , taskStart
            ) m1 ON m.effId = m1.effId
            <where>
                <if test="taskId != null">
                    AND m.taskId = #{taskId}
                </if>
                AND m.periodType = 'Day'

                <choose>
                    <when test="meterIdList != null and meterIdList.size > 0">
                        AND m.meterId IN
                        <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                            #{mid}
                        </foreach>
                    </when>
                    <when test="meterId != null">
                        AND m.meterId LIKE #{meterId}
                    </when>
                </choose>

                <if test="powerType != null">
                    AND m.powerType LIKE #{powerType}
                </if>
                <if test="meterBrandId != null">
                    AND m.meterBrandId LIKE #{meterBrandId}
                </if>
                <if test="sizeId != null">
                    AND m.sizeId LIKE #{sizeId}
                </if>
                <if test="modelSize != null">
                    AND m.modelSize LIKE #{modelSize}
                </if>

                <choose>
                    <when test="taskStart != null and taskEnd != null">
                        AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                    </when>
                    <when test="taskStart != null">
                        AND m.taskStart = #{taskStart}
                    </when>
                    <when test="taskEnd != null">
                        AND m.taskEnd = #{taskEnd}
                    </when>
                </choose>
            </where>
            GROUP BY
            m.meterId
            , date_trunc('month', m.taskStart)
        ) m2 ON m1.meterId = m2.meterId
        LEFT JOIN bw_eff_task t on m.taskId = t.taskId
        <where>
            <if test="firmId != null">
                t.firmId LIKE #{firmId}
            </if>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            AND m.periodType = 'Day'

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
    </insert>

    <insert id="buildEffMeterYear" parameterType="com.abel.bigwater.api.EffParam">
        INSERT INTO bw_eff_meter( taskId
        , meterId
        , meterName
        , taskName
        , taskStart
        , taskEnd
        , periodType
        , runTime
        , runDuration
        , taskResult
        , meterWater
        , q0v
        , q1v
        , q2v
        , q3v
        , q4v
        , qtv
        , meterEff
        , realWater
        , startTime
        , endTime
        , stdDays
        , startFwd
        , endFwd
        , powerType
        , meterBrandId
        , sizeId
        , sizeName
        , modelSize
        , dataRows
        , decayEff
        , q4
        , q3
        , q3toq1
        , q4toq3
        , q2toq1
        , qr1
        , qr2
        , qr3
        , qr4)
        SELECT m.taskId
        , m.meterId
        , m.meterName
        , m.taskName
        , m2.taskStart
        , (m2.taskStart + interval '1Year') taskEnd
        , 'Year' periodType
        , m.runTime
        , m2.runDuration
        , m.taskResult
        , m2.meterWater
        , m2.q0v
        , m2.q1v
        , m2.q2v
        , m2.q3v
        , m2.q4v
        , m2.qtv
        , (case when (m2.realWater &lt; 0.001) then 0.0 else (m2.meterWater / m2.realWater) * 100 end) AS meterEff
        , m2.realWater
        , m2.startTime
        , m2.endTime
        , m2.stdDays
        , m2.startFwd
        , m2.endFwd
        , m.powerType
        , m.meterBrandId
        , m.sizeId
        , m.sizeName
        , m.modelSize
        , m2.dataRows
        , m.decayEff
        , m.q4
        , m.q3
        , m.q3toq1
        , m.q4toq3
        , m.q2toq1
        , m.qr1
        , m.qr2
        , m.qr3
        , m.qr4
        FROM (
        SELECT
        meterId
        , MAX(effId) effId
        FROM bw_eff_meter
        <where>
            <if test="taskId != null">
                AND taskId = #{taskId}
            </if>
            AND periodType = 'Month'

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY meterId
        ) m1
        JOIN bw_eff_meter m ON m.effId = m1.effId
        JOIN (
        SELECT
        m.meterId
        , date_trunc('year', m.taskStart) taskStart
        , SUM(runDuration) runDuration
        , SUM(meterWater) meterWater
        , SUM(q0v) q0v
        , SUM(q1v) q1v
        , SUM(q2v) q2v
        , SUM(q3v) q3v
        , SUM(q4v) q4v
        , SUM(qtv) qtv
        , SUM(realWater) realWater
        , MIN(startTime) startTime
        , MAX(endTime) endTime
        , SUM(stdDays) stdDays
        , MIN(startFwd) startFwd
        , MAX(endFwd) endFwd
        , COUNT(1) dataRows
        FROM bw_eff_meter m
        JOIN (
        SELECT meterId
        , taskStart
        , MAX(effId) effId
        FROM bw_eff_meter
        <where>
            <if test="taskId != null">
                AND taskId = #{taskId}
            </if>
            AND periodType = 'Month'

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY meterId
        , taskStart
        ) m1 ON m.effId = m1.effId
        <where>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            AND m.periodType = 'Month'

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY
        m.meterId
        , date_trunc('year', m.taskStart)
        ) m2 ON m1.meterId = m2.meterId
        LEFT JOIN bw_eff_task t on m.taskId = t.taskId
        <where>
            <if test="firmId != null">
                t.firmId LIKE #{firmId}
            </if>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            AND m.periodType = 'Month'

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>

            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
    </insert>

    <update id="updateEffMeter" parameterType="com.abel.bigwater.api.EffParam">
        UPDATE bw_eff_meter
        <set>
            meterName = tmp.meterName
            , taskName = tmp.taskName
            , taskStart = tmp.taskStart
            , taskEnd = tmp.taskEnd
            , periodType = tmp.periodType
            , runTime = tmp.runTime
            , runDuration = tmp.runDuration
            , taskResult = tmp.taskResult
            , meterWater = tmp.meterWater
            , q0v = tmp.q0v
            , q1v = tmp.q1v
            , q2v = tmp.q2v
            , q3v = tmp.q3v
            , q4v = tmp.q4v
            , qtv = tmp.qtv
            , meterEff = tmp.meterEff
            , realWater = tmp.realWater
            , startTime = tmp.startTime
            , endTime = tmp.endTime
            , stdDays = tmp.stdDays
            , startFwd = tmp.startFwd
            , endFwd = tmp.endFwd
            , powerType = tmp.powerType
            , meterBrandId = tmp.meterBrandId
            , sizeId = tmp.sizeId
            , sizeName = tmp.sizeName
            , modelSize = tmp.modelSize
            , dataRows = tmp.dataRows
            , decayEff = tmp.decayEff
            , srcError = tmp.srcError
            , q4 = tmp.q4
            , q3 = tmp.q3
            , q3toq1 = tmp.q3toq1
            , q4toq3 = tmp.q4toq3
            , q2toq1 = tmp.q2toq1
            , qr1 = tmp.qr1
            , qr2 = tmp.qr2
            , qr3 = tmp.qr3
            , qr4 = tmp.qr4
        </set>
        FROM (
        VALUES
        <foreach collection="meterList" item="m1" separator=",">
            (#{m1.effId}
            , #{m1.taskId}
            , #{m1.meterId}
            , #{m1.meterName}
            , #{m1.taskName}
            , #{m1.taskStart}
            , #{m1.taskEnd}
            , #{m1.periodType}
            , #{m1.runTime}
            , #{m1.runDuration}
            , #{m1.taskResult}
            , #{m1.meterWater}
            , #{m1.q0v}
            , #{m1.q1v}
            , #{m1.q2v}
            , #{m1.q3v}
            , #{m1.q4v}
            , #{m1.qtv}
            , #{m1.meterEff}
            , #{m1.realWater}
            , #{m1.startTime}
            , #{m1.endTime}
            , #{m1.stdDays}
            , #{m1.startFwd}
            , #{m1.endFwd}
            , #{m1.powerType}
            , #{m1.meterBrandId}
            , #{m1.sizeId}
            , #{m1.sizeName}
            , #{m1.modelSize}
            , #{m1.dataRows}
            , #{m1.decayEff}
            , #{m1.srcError}
            , #{m1.q4}
            , #{m1.q3}
            , #{m1.q3toq1}
            , #{m1.q4toq3}
            , #{m1.q2toq1}
            , #{m1.qr1}
            , #{m1.qr2}
            , #{m1.qr3}
            , #{m1.qr4})
        </foreach>
        ) AS tmp (
        effId
        , taskId
        , meterId
        , meterName
        , taskName
        , taskStart
        , taskEnd
        , periodType
        , runTime
        , runDuration
        , taskResult
        , meterWater
        , q0v
        , q1v
        , q2v
        , q3v
        , q4v
        , qtv
        , meterEff
        , realWater
        , startTime
        , endTime
        , stdDays
        , startFwd
        , endFwd
        , powerType
        , meterBrandId
        , sizeId
        , sizeName
        , modelSize
        , dataRows
        , decayEff
        , srcError
        , q4
        , q3
        , q3toq1
        , q4toq3
        , q2toq1
        , qr1
        , qr2
        , qr3
        , qr4
        )
        <where>
            bw_eff_meter.taskId = tmp.taskId
            AND bw_eff_meter.meterId = tmp.meterId
        </where>
    </update>

    <delete id="deleteEffMeterWithTask" parameterType="com.abel.bigwater.api.EffParam">
        DELETE
        FROM bw_eff_meter m
        USING bw_eff_task t

        <where>
            m.taskId = t.taskId

            <if test="effId != null">
                AND m.effId LIKE #{effId}
            </if>
            <if test="firmId != null">
                AND t.firmId LIKE #{firmId}
            </if>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            <if test="periodType != null">
                AND m.periodType LIKE #{periodType}
            </if>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="createDateStart != null and createDateEnd != null">
                    AND t.createDate BETWEEN #{createDateStart} AND #{createDateEnd}
                </when>
                <when test="createDate != null">
                    AND t.createDate = #{createDate}
                </when>
                <when test="createDateStart != null">
                    AND t.createDate &gt;= #{createDateStart}
                </when>
                <when test="createDateEnd != null">
                    AND t.createDate &lt;= #{createDateEnd}
                </when>
            </choose>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND t.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND t.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND t.taskEnd = #{taskEnd}
                </when>
            </choose>

            <choose>
                <when test="runTime1 != null and runTime2 != null">
                    AND t.runTime BETWEEN #{runTime1} AND #{runTime2}
                </when>
                <when test="runTime != null">
                    AND t.runTime = #{runTime}
                </when>
                <when test="runTime1 != null">
                    AND t.runTime &gt;= #{runTime1}
                </when>
                <when test="runTime2 != null">
                    AND t.runTime &lt;= #{runTime2}
                </when>
            </choose>
        </where>
    </delete>

    <delete id="deleteEffMeter" parameterType="com.abel.bigwater.api.EffParam">
        DELETE
        FROM bw_eff_meter m

        <where>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            <if test="effId != null">
                AND m.effId LIKE #{effId}
            </if>
            <if test="periodType != null">
                AND m.periodType LIKE #{periodType}
            </if>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
    </delete>

    <delete id="deleteEffFailure" parameterType="com.abel.bigwater.api.EffParam">
        DELETE
        FROM bw_eff_failure m

        <where>
            <if test="taskResult != null">
                AND m.taskResult LIKE #{taskResult}
            </if>
            <if test="taskId != null">
                AND m.taskId = #{taskId}
            </if>
            <if test="effId != null">
                AND m.effId LIKE #{effId}
            </if>
            <if test="periodType != null">
                AND m.periodType LIKE #{periodType}
            </if>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND m.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND m.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND m.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND m.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND m.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
    </delete>

    <select id="listEffPoint" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.eff.EffMeterPoint">
        SELECT p.wid
        , p.meterId
        , p.taskId
        , p.effId
        , p.taskStart
        , p.taskEnd
        , p.periodType
        , p.pointType
        , p.pointNo
        , p.pointName
        , p.pointFlow
        , p.pointDev
        , p.highLimit
        , p.lowLimit
        , p.pointWater
        , p.realWater
        FROM bw_meter_eff_point p
        JOIN bw_eff_meter m ON p.effId = m.effId
        LEFT JOIN bw_eff_task t ON p.taskId = t.taskId

        <where>
            <if test="effId != null">
                AND p.effId = #{effId}
            </if>
            <if test="taskId != null">
                AND p.taskId = #{taskId}
            </if>
            <if test="firmId != null">
                AND (t.firmId IS NULL OR t.firmId LIKE #{firmId})
            </if>

            <choose>
                <when test="periodType != null">
                    AND p.periodType LIKE #{periodType}
                </when>
                <otherwise>
                    AND p.periodType LIKE 'Day'
                </otherwise>
            </choose>
            <choose>
                <when test="pointType != null">
                    AND p.pointType LIKE #{pointType}
                </when>
                <otherwise>
                    AND p.pointType LIKE 'MODEL'
                </otherwise>
            </choose>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND p.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND p.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND p.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND p.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND p.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        ORDER BY p.meterId
        , p.taskStart
        , p.periodType
        , p.pointType
        , p.pointNo
    </select>

    <select id="statEffPointManual" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.eff.EffMeterPoint">
        SELECT p.periodType
        , p.pointType
        , p.pointNo
        , p.pointName
        , MAX(p.pointFlow) pointFlow
        , AVG(p.pointWater) pointWater
        , AVG(p.realWater) realWater
        FROM bw_meter_eff_point p
        JOIN bw_eff_meter m ON p.effId = m.effId
        LEFT JOIN bw_eff_task t ON p.taskId = t.taskId

        <where>
            <if test="firmId != null">
                AND (t.firmId IS NULL OR t.firmId LIKE #{firmId})
            </if>

            <choose>
                <when test="lowDayConsume != null and highDayConsume != null">
                    AND p.periodType = 'Month'
                    AND m.meterWater / m.stdDays BETWEEN #{lowDayConsume} AND #{highDayConsume}
                </when>
                <when test="periodType != null">
                    AND p.periodType LIKE #{periodType}
                </when>
                <otherwise>
                    AND p.periodType LIKE 'Day'
                </otherwise>
            </choose>
            <choose>
                <when test="pointType != null">
                    AND p.pointType LIKE #{pointType}
                </when>
                <otherwise>
                    AND p.pointType LIKE 'MODEL'
                </otherwise>
            </choose>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND p.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND p.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND p.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND p.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND p.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY p.periodType
        , p.pointType
        , p.pointNo
        , p.pointName
        ORDER BY p.periodType
        , p.pointType
        , p.pointNo
    </select>

    <insert id="insertEffPoint" parameterType="com.abel.bigwater.api.EffParam">
        INSERT INTO
        bw_meter_eff_point(
        meterId
        , taskId
        , effId
        , taskStart
        , taskEnd
        , periodType
        , pointType
        , pointNo
        , pointName
        , pointFlow
        , pointDev
        , highLimit
        , lowLimit
        , pointWater
        , realWater
        ) VALUES
        <foreach collection="pointEffList" item="pt" separator=",">
            (#{pt.meterId}
            , #{pt.taskId}
            , #{pt.effId}
            , #{pt.taskStart}
            , #{pt.taskEnd}
            , #{pt.periodType}
            , #{pt.pointType}
            , #{pt.pointNo}
            , #{pt.pointName}
            , #{pt.pointFlow}
            , #{pt.pointDev}
            , #{pt.highLimit}
            , #{pt.lowLimit}
            , #{pt.pointWater}
            , #{pt.realWater})
        </foreach>
    </insert>

    <!-- build eff-point-monthly from eff-point-daily -->
    <insert id="buildEffPointMonth" parameterType="com.abel.bigwater.api.EffParam">
        INSERT INTO
        bw_meter_eff_point(
        meterId
        , taskId
        , effId
        , taskStart
        , taskEnd
        , periodType
        , pointType
        , pointNo
        , pointName
        , pointFlow
        , pointDev
        , highLimit
        , lowLimit
        , pointWater
        , realWater
        )
        SELECT mp.meterId
             , mp.taskId
             , mp.effId
             , mp1.taskStart
             , (mp1.taskStart + interval'1Month') taskEnd
             , 'Month' periodType
             , mp.pointType
             , mp.pointNo
             , mp.pointName
             , mp.pointFlow
             , mp.pointDev
             , mp.highLimit
             , mp.lowLimit
             , mp1.pointWater
             , mp1.realWater
        FROM bw_meter_eff_point mp

        JOIN (
            SELECT p1.meterId
            , p1.pointType
            , p1.pointName
            , date_trunc('Month', p1.taskStart) taskStart
            , MAX(mpx.wid) wid
            , SUM(p1.pointWater) pointWater
            , SUM(p1.realWater) realWater
            FROM bw_meter_eff_point p1
            JOIN (

                SELECT MAX(wid) wid
                , meterId
                , taskStart
                , pointType
                , pointName
                FROM bw_meter_eff_point
                <where>
                    periodType = 'Day'

                    <choose>
                        <when test="meterIdList != null and meterIdList.size > 0">
                            AND meterId IN
                            <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                                #{mid}
                            </foreach>
                        </when>
                        <when test="meterId != null">
                            AND meterId LIKE #{meterId}
                        </when>
                    </choose>

                    <choose>
                        <when test="taskStart != null and taskEnd != null">
                            AND taskStart BETWEEN #{taskStart} AND #{taskEnd}
                        </when>
                        <when test="taskStart != null">
                            AND taskStart = #{taskStart}
                        </when>
                        <when test="taskEnd != null">
                            AND taskEnd = #{taskEnd}
                        </when>
                    </choose>
                </where>
                GROUP BY meterId
                , taskStart
                , pointType
                , pointName
                ORDER BY meterId
                , taskStart
                , pointType
                , pointName
            ) mpx ON p1.wid = mpx.wid
            <where>
                p1.periodType = 'Day'

                <choose>
                    <when test="meterIdList != null and meterIdList.size > 0">
                        AND p1.meterId IN
                        <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                            #{mid}
                        </foreach>
                    </when>
                    <when test="meterId != null">
                        AND p1.meterId LIKE #{meterId}
                    </when>
                </choose>

                <choose>
                    <when test="taskStart != null and taskEnd != null">
                        AND p1.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                    </when>
                    <when test="taskStart != null">
                        AND p1.taskStart = #{taskStart}
                    </when>
                    <when test="taskEnd != null">
                        AND p1.taskEnd = #{taskEnd}
                    </when>
                </choose>
            </where>
            GROUP BY p1.meterId
                   , p1.pointType
                   , p1.pointName
                   , date_trunc('Month', p1.taskStart)
            ) mp1 ON mp.meterId = mp1.meterId
                         AND mp.pointType = mp1.pointType
                         AND mp.pointName = mp1.pointName
                         AND mp.wid = mp1.wid
    </insert>
    <insert id="buildEffPointYear" parameterType="com.abel.bigwater.api.EffParam">
        INSERT INTO
        bw_meter_eff_point(
        meterId
        , taskId
        , effId
        , taskStart
        , taskEnd
        , periodType
        , pointType
        , pointNo
        , pointName
        , pointFlow
        , pointDev
        , highLimit
        , lowLimit
        , pointWater
        , realWater
        )
        SELECT mp.meterId
        , mp.taskId
        , mp.effId
        , mp1.taskStart
        , (mp1.taskStart + interval'1Year') taskEnd
        , 'Year' periodType
        , mp.pointType
        , mp.pointNo
        , mp.pointName
        , mp.pointFlow
        , mp.pointDev
        , mp.highLimit
        , mp.lowLimit
        , mp1.pointWater
        , mp1.realWater
        FROM bw_meter_eff_point mp

        JOIN (
        SELECT p1.meterId
        , p1.pointType
        , p1.pointName
        , date_trunc('Year', p1.taskStart) taskStart
        , MAX(mpx.wid) wid
        , SUM(p1.pointWater) pointWater
        , SUM(p1.realWater) realWater
        FROM bw_meter_eff_point p1
        JOIN (

        SELECT MAX(wid) wid
        , meterId
        , taskStart
        , pointType
        , pointName
        FROM bw_meter_eff_point
        <where>
            periodType = 'Month'

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND meterId LIKE #{meterId}
                </when>
            </choose>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY meterId
        , taskStart
        , pointType
        , pointName
        ORDER BY meterId
        , taskStart
        , pointType
        , pointName
        ) mpx ON p1.wid = mpx.wid
        <where>
            p1.periodType = 'Month'

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND p1.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND p1.meterId LIKE #{meterId}
                </when>
            </choose>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND p1.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND p1.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND p1.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
        GROUP BY p1.meterId
        , p1.pointType
        , p1.pointName
        , date_trunc('Year', p1.taskStart)
        ) mp1 ON mp.meterId = mp1.meterId
        AND mp.pointType = mp1.pointType
        AND mp.pointName = mp1.pointName
        AND mp.wid = mp1.wid
    </insert>

    <delete id="deleteEffPointWithTask" parameterType="com.abel.bigwater.api.EffParam">
        DELETE
        FROM bw_meter_eff_point p
        USING bw_eff_meter m
        LEFT JOIN bw_eff_task t on m.taskId = t.taskId

        <where>
            p.meterId = m.meterId
            AND p.taskId = m.taskId

            <if test="firmId != null">
                AND t.firmId LIKE #{firmId}
            </if>
            <if test="taskId != null">
                AND p.taskId = #{taskId}
            </if>
            <if test="periodType != null">
                AND p.periodType LIKE #{periodType}
            </if>
            <if test="pointType != null">
                AND p.pointType LIKE #{pointType}
            </if>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND p.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND p.meterId LIKE #{meterId}
                </when>
            </choose>

            <if test="powerType != null">
                AND m.powerType LIKE #{powerType}
            </if>
            <if test="meterBrandId != null">
                AND m.meterBrandId LIKE #{meterBrandId}
            </if>
            <if test="sizeId != null">
                AND m.sizeId LIKE #{sizeId}
            </if>
            <if test="modelSize != null">
                AND m.modelSize LIKE #{modelSize}
            </if>

            <choose>
                <when test="createDateStart != null and createDateEnd != null">
                    AND t.createDate BETWEEN #{createDateStart} AND #{createDateEnd}
                </when>
                <when test="createDate != null">
                    AND t.createDate = #{createDate}
                </when>
                <when test="createDateStart != null">
                    AND t.createDate &gt;= #{createDateStart}
                </when>
                <when test="createDateEnd != null">
                    AND t.createDate &lt;= #{createDateEnd}
                </when>
            </choose>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND t.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND t.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND t.taskEnd = #{taskEnd}
                </when>
            </choose>

            <choose>
                <when test="runTime1 != null and runTime2 != null">
                    AND t.runTime BETWEEN #{runTime1} AND #{runTime2}
                </when>
                <when test="runTime != null">
                    AND t.runTime = #{runTime}
                </when>
                <when test="runTime1 != null">
                    AND t.runTime &gt;= #{runTime1}
                </when>
                <when test="runTime2 != null">
                    AND t.runTime &lt;= #{runTime2}
                </when>
            </choose>
        </where>
    </delete>

    <delete id="deleteEffPoint" parameterType="com.abel.bigwater.api.EffParam">
        DELETE
        FROM bw_meter_eff_point p

        <where>
            <if test="periodType != null">
                AND p.periodType LIKE #{periodType}
            </if>
            <if test="pointType != null">
                AND p.pointType LIKE #{pointType}
            </if>

            <choose>
                <when test="meterIdList != null and meterIdList.size > 0">
                    AND p.meterId IN
                    <foreach collection="meterIdList" item="mid" separator="," open="(" close=")">
                        #{mid}
                    </foreach>
                </when>
                <when test="meterId != null">
                    AND p.meterId LIKE #{meterId}
                </when>
            </choose>

            <choose>
                <when test="taskStart != null and taskEnd != null">
                    AND p.taskStart BETWEEN #{taskStart} AND #{taskEnd}
                </when>
                <when test="taskStart != null">
                    AND p.taskStart = #{taskStart}
                </when>
                <when test="taskEnd != null">
                    AND p.taskEnd = #{taskEnd}
                </when>
            </choose>
        </where>
    </delete>

    <select id="selectEffDecay" parameterType="com.abel.bigwater.api.EffParam"
            resultType="com.abel.bigwater.model.eff.VcEffDecay">
        SELECT decayId
             , meterBrandId
             , meterBrandName
             , sizeId
             , sizeName
             , modelSize
             , totalFwd
             , decayEff
             , createBy
             , createDate
             , updateBy
             , updateDate
             , deprecated
             , q1
             , q2
             , q3
             , q4
             , q1r
             , q2r
             , q3r
             , q4r
             , qs1
             , qs2
             , qs3
             , qs4
             , qs5
             , qs6
             , qs7
             , qs8
             , qs9
             , qs10
             , qs1r
             , qs2r
             , qs3r
             , qs4r
             , qs5r
             , qs6r
             , qs7r
             , qs8r
             , qs9r
             , qs10r
        FROM bw_eff_decay
        <where>
            <choose>
                <when test="decayId > 0">
                    decayId = #{decayId}
                </when>
                <otherwise>
                    <if test="meterBrandId != null">
                        AND meterBrandId LIKE #{meterBrandId}
                    </if>
                    <if test="sizeId != null">
                        AND sizeId = #{sizeId}
                    </if>
                    <if test="sizeName != null">
                        AND sizeName LIKE #{sizeName}
                    </if>
                    <if test="modelSize != null">
                        AND modelSize LIKE #{modelSize}
                    </if>
                </otherwise>
            </choose>
        </where>
    </select>

    <insert id="insertEffDecay" parameterType="com.abel.bigwater.api.EffParam">
        INSERT INTO bw_eff_decay(meterBrandId
        , meterBrandName
        , sizeId
        , sizeName
        , modelSize
        , totalFwd
        , decayEff
        , createBy
        , createDate
        , updateBy
        , updateDate
        , deprecated
        , q1
        , q2
        , q3
        , q4
        , q1r
        , q2r
        , q3r
        , q4r
        , qs1
        , qs2
        , qs3
        , qs4
        , qs5
        , qs6
        , qs7
        , qs8
        , qs9
        , qs10
        , qs1r
        , qs2r
        , qs3r
        , qs4r
        , qs5r
        , qs6r
        , qs7r
        , qs8r
        , qs9r
        , qs10r
        )
        VALUES
        <foreach collection="decayList" item="de" separator=",">
            ( #{de.meterBrandId}
            , #{de.meterBrandName}
            , #{de.sizeId}
            , #{de.sizeName}
            , #{de.modelSize}
            , #{de.totalFwd}
            , #{de.decayEff}
            , #{de.createBy}
            , #{de.createDate}
            , #{de.updateBy}
            , #{de.updateDate}
            , #{de.deprecated}
            , #{de.q1}
            , #{de.q2}
            , #{de.q3}
            , #{de.q4}
            , #{de.q1r}
            , #{de.q2r}
            , #{de.q3r}
            , #{de.q4r}
            , #{de.qs1}
            , #{de.qs2}
            , #{de.qs3}
            , #{de.qs4}
            , #{de.qs5}
            , #{de.qs6}
            , #{de.qs7}
            , #{de.qs8}
            , #{de.qs9}
            , #{de.qs10}
            , #{de.qs1r}
            , #{de.qs2r}
            , #{de.qs3r}
            , #{de.qs4r}
            , #{de.qs5r}
            , #{de.qs6r}
            , #{de.qs7r}
            , #{de.qs8r}
            , #{de.qs9r}
            , #{de.qs10r}
            )
        </foreach>
    </insert>

    <insert id="insertEffDecaySingle" parameterType="com.abel.bigwater.model.eff.VcEffDecay"
            useGeneratedKeys="true" keyColumn="decayid" keyProperty="decayId">
        INSERT INTO bw_eff_decay(meterBrandId
        , meterBrandName
        , sizeId
        , sizeName
        , modelSize
        , totalFwd
        , decayEff
        , createBy
        , createDate
        , updateBy
        , updateDate
        , deprecated
        , q1
        , q2
        , q3
        , q4
        , q1r
        , q2r
        , q3r
        , q4r
        , qs1
        , qs2
        , qs3
        , qs4
        , qs5
        , qs6
        , qs7
        , qs8
        , qs9
        , qs10
        , qs1r
        , qs2r
        , qs3r
        , qs4r
        , qs5r
        , qs6r
        , qs7r
        , qs8r
        , qs9r
        , qs10r
        )
        VALUES
            ( #{meterBrandId}
            , #{meterBrandName}
            , #{sizeId}
            , #{sizeName}
            , #{modelSize}
            , #{totalFwd}
            , #{decayEff}
            , #{createBy}
            , #{createDate}
            , #{updateBy}
            , #{updateDate}
            , #{deprecated}
            , #{q1}
            , #{q2}
            , #{q3}
            , #{q4}
            , #{q1r}
            , #{q2r}
            , #{q3r}
            , #{q4r}
            , #{qs1}
            , #{qs2}
            , #{qs3}
            , #{qs4}
            , #{qs5}
            , #{qs6}
            , #{qs7}
            , #{qs8}
            , #{qs9}
            , #{qs10}
            , #{qs1r}
            , #{qs2r}
            , #{qs3r}
            , #{qs4r}
            , #{qs5r}
            , #{qs6r}
            , #{qs7r}
            , #{qs8r}
            , #{qs9r}
            , #{qs10r}
            )
    </insert>

    <delete id="deleteEffDecay" parameterType="com.abel.bigwater.api.EffParam">
        DELETE FROM bw_eff_decay
            USING bw_eff_decay ed,
                (VALUES
                    <foreach collection="decayList" item="d1" separator=",">
                        (
                         #{d1.decayId}
                         , #{d1.meterBrandId}
                         , #{d1.sizeId}
                         , #{d1.modelSize}
                        )
                    </foreach> )
                AS tmp(decayId
                    , meterBrandId
                    , sizeId
                    , modelSize)
        <where>
            <choose>
                <when test="decayId != null">
                    AND ed.decayId = #{decayId}
                </when>
                <otherwise>
                    AND ed.meterBrandId = tmp.meterBrandId
                    AND ed.sizeId = tmp.sizeId
                    AND ed.modelSize = tmp.modelSize
                </otherwise>
            </choose>
            <if test="sizeName != null">
                AND ed.sizeName LIKE #{sizeName}
            </if>
        </where>
    </delete>

    <delete id="deleteEffDecaySingle" parameterType="com.abel.bigwater.api.EffParam">
        DELETE FROM bw_eff_decay
        <where>
            <choose>
                <when test="decayId != null">
                    AND decayId = #{decayId}
                </when>
                <otherwise>
                    AND meterBrandId LIKE #{meterBrandId}
                    AND sizeId = #{sizeId}
                    AND modelSize LIKE #{modelSize}
                </otherwise>
            </choose>
            <if test="sizeName != null">
                AND sizeName LIKE #{sizeName}
            </if>
        </where>
    </delete>
</mapper>