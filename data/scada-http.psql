create or replace procedure httpGroupCode()
    language plpgsql
as
$$
declare
    url                  varchar;
    declare pathAccess   varchar;
    declare clientId     varchar;
    declare clientSecret varchar;
    declare cs           varchar;
    declare grantType    varchar;

    declare tsReq timestamptz;
    declare tsResp timestamptz;
    declare reqJson      varchar;
    declare statusCode   int4;

    declare authJson     json;
    declare accessToken  varchar;
    declare authRow      RECORD;

    declare pathFact     varchar;
    declare factJson     json;
    DECLARE factCnt      int;
    declare fact         JSON;
    DECLARE rcnt         int;
begin
    -- url: http://10.200.6.72:8082/hdl/oauth/v1.0/access.json
    -- url: http://10.200.6.72:8082/hdl/scada/v1.0/factory/monitors.json
    url := 'http://10.200.6.72:8082/';
    pathAccess := 'hdl/oauth/v1.0/access.json';
    clientId := 'lousun';
    clientSecret := '25396879';
    grantType := 'client_credentials';
    pathFact := 'hdl/scada/v1.0/factory/monitors.json';

    accessToken := '';
    raise log '##############################';
    raise log 'Start synchronize montors and history / realtime...';

    -- find most recent auth
    select auth.accessToken, auth.respTime, auth.expiresIn
    into authRow
    from scada.scada_auth_list AS auth
    order by auth.respTime desc
    limit 1;
    if found then
        if authRow.respTime + interval '1 second' * authRow.expiresIn > now() + interval '5 minute' then
            accessToken := authRow.accessToken;
            raise notice 'using exist accessToken: %', accessToken;
        end if;
    end if;

    -- accessToken not exist in database
    perform http_set_curlopt('CURLOPT_TIMEOUT', '10');
    if length(accessToken) < 1 then
        cs := substring(digest(clientId || '$' || clientSecret, 'sha256')::text from 3);
        reqJson := json_object(
                array ['grant_type', grantType, 'client_id', clientId, 'client_secret', cs]::text[]);
        raise notice 'access.json request: %', reqJson;

        tsReq := now();
        select http.status, http.content::json
        into statusCode, authJson
        from http_post(url || pathAccess, reqJson, 'application/json') AS http;
        tsResp := now();

        raise notice 'access.json got %: %', statusCode, authJson;
        accessToken := authJson::json ->> 'access_token';

        insert into scada.scada_auth_list(reqTime, grantType, clientId, clientSecret,
                                          respTime, statusCode, retFine,
                                          tokenType, accessToken, refreshToken, expiresIn,
                                          respText)
        values (tsReq, grantType, clientId, clientSecret,
                tsResp, statusCode, length(accessToken) > 0,
                authJson ->> 'token_type', accessToken, authJson ->> 'refresh_token', (authJson ->> 'expires_in')::int,
                authJson);

        commit;
    end if;

    reqJson := json_build_object('access_token', accessToken)::text;
    raise notice 'monitors.json request: %', reqJson;

    tsReq := now();
    select http.status, http.content::json
    into statusCode, factJson
    from http_post(url || pathFact, reqJson, 'application/json') AS http;
    tsResp := now();

    raise notice 'monitors.json response %: %', statusCode, factJson;

    -- insert fact
    statusCode := (factJson ->> 'Code')::int;
    if statusCode != 0 then
        raise notice 'fail to list fact: %', statusCode;
        raise log 'fail to list fact: %', statusCode;
    end if;
    select json_array_length(factJson->'Response') into factCnt;

    -- insert into request-log
    insert into scada.scada_stat_req(accessToken, fgroup, fmodel, sensor, reqTime, respTime, statusCode,
    retFine, dataCount, respText)
    values(accessToken, '', '', false, tsReq, tsResp, statusCode, statusCode = 0, factCnt, factJson);

    for i in 0..(factCnt - 1)
        loop
            fact := factJson->'Response'->i;
            raise notice 'proceed factory group:%, code:%, %', fact->>'group', fact->>'code', fact::text;
            raise log 'proceed factory group:%, code:%, %', fact->>'group', fact->>'code', fact::text;

            update scada.scada_stat
            set fname    = fact ->> 'name',
                sname    = fact ->> 'sname',
                mty      = fact ->> 'mty',
                position = fact ->> 'position',
                sensors  = fact -> 'sensors'
            where fgroup = fact ->> 'group'
              and fcode = fact ->> 'code';
            get DIAGNOSTICS rcnt := ROW_COUNT;

            if rcnt < 1 then
                insert into scada.scada_stat(fgroup, fcode, fname, sname, mty, position, sensors, statWork)
                values (fact ->> 'group',
                        fact ->> 'code',
                        fact ->> 'name',
                        fact ->> 'sname',
                        fact ->> 'mty',
                        fact ->> 'position',
                        fact -> 'sensors',
                        'PAUSE');
            end if;
        end loop;
end;

$$;



create or replace procedure httpScada()
    language plpgsql
as
$$
    declare url          varchar;
    declare pathAccess   varchar;
    declare clientId     varchar;
    declare clientSecret varchar;
    declare cs           varchar;
    declare grantType    varchar;

    declare tsreq   timestamptz;
    declare tsresp  timestamptz;
    declare statusCode   int4;
    declare reqJson      varchar;

    declare authJson     json;
    declare accessToken  varchar;
    declare authRow      RECORD;

    declare fact    RECORD;
    declare pathHist    varchar;
    declare lastDataTime timestamp;
    declare histJson    json;
    declare histCnt int4;
    declare hist json;

    declare pathReal    varchar;
    declare realJson    json;
    declare rt json;
    declare rtCnt int4;
begin
    -- url: http://10.200.6.72:8082/hdl/oauth/v1.0/access.json
    -- url: http://10.200.6.72:8082/hdl/scada/v1.0/sensor/history.json
    -- url: http://10.200.6.72:8082/hdl/scada/v1.0/sensor/realtime.json
    url := 'http://10.200.6.72:8082/';
    pathAccess := 'hdl/oauth/v1.0/access.json';
    clientId := 'lousun';
    clientSecret := '25396879';
    grantType := 'client_credentials';
    pathHist := 'hdl/scada/v1.0/sensor/history.json';
    pathReal := 'hdl/scada/v1.0/sensor/realtime.json';

    accessToken := '';
    raise log '##############################';
    raise log 'Start synchronize montors and history / realtime...';

    -- find most recent auth
    select auth.accessToken, auth.respTime, auth.expiresIn
    into authRow
    from scada.scada_auth_list AS auth
    order by auth.respTime desc
    limit 1;
    if found then
        if authRow.respTime + interval '1 second' * authRow.expiresIn > now() + interval '5 minute' then
            accessToken := authRow.accessToken;
            raise notice 'using exist accessToken: %', accessToken;
        end if;
    end if;

    -- accessToken not exist in database
    perform http_set_curlopt('CURLOPT_TIMEOUT', '10');
    if length(accessToken) < 1 then
        cs := substring(digest(clientId || '$' || clientSecret, 'sha256')::text from 3);
        reqJson := json_object(
                array ['grant_type', grantType, 'client_id', clientId, 'client_secret', cs]::text[]);
        raise notice 'access.json request: %', reqJson;

        tsreq := now();
        select http.status, http.content::json
        into statusCode, authJson
        from http_post(url || pathAccess, reqJson, 'application/json') AS http;
        tsresp := now();

        raise notice 'access.json got %: %', statusCode, authJson;
        accessToken := authJson::json ->> 'access_token';

        insert into scada.scada_auth_list(reqTime, grantType, clientId, clientSecret,
                                          respTime, statusCode, retFine,
                                          tokenType, accessToken, refreshToken, expiresIn,
                                          respText)
        values (tsreq, grantType, clientId, clientSecret,
                tsresp, statusCode, length(accessToken) > 0,
                authJson ->> 'token_type', accessToken, authJson ->> 'refresh_token', (authJson ->> 'expires_in')::int,
                authJson);

        commit;
    end if;

    -- fetch history one by one
    for fact IN (select fgroup, fcode, fname, sname, dtype, mty, position, sensors, statWork
    FROM scada.scada_stat
    where statWork = 'WORK' OR statWork IS NULL)
    loop
        lastDataTime := null;
        select max(ftime) into lastDataTime
        from scada.scada_hist
        where fcode = fact.fcode;

        if lastDataTime is null then
            lastDataTime := date_trunc('day', now() - interval '7 days');
        end if;

        -- fetch history
        call fetchHistPeriod(accessToken, fact.fcode, fact.fname, fact.dtype,
        extract(epoch from lastDataTime)::int + 1, extract(epoch from now())::int + 10);

        commit;

        -- fetch realtime one by one
        call fetchRealtime(accessToken, fact.fcode, fact.fname, fact.dtype);

        commit;
    end loop;
end;

$$;

-- fetch history for specified fcode & period
create or replace procedure fetchHistPeriod(
    accessToken  varchar,
    pfcode varchar,
    pfname varchar,
    pdtype varchar,
    tsBegin int8,
    tsEnd int8
)
language plpgsql
as
$$
    declare url varchar;

    declare tsreq   timestamptz;
    declare tsresp  timestamptz;
    declare statusCode   int4;
    declare reqJson      varchar;

    declare pathHist    varchar;
    declare histJson    json;
    declare histCnt int4;
    declare hist json;
begin
    -- url: http://10.200.6.72:8082/hdl/scada/v1.0/sensor/history.json
    url := 'http://10.200.6.72:8082/';
    pathHist := 'hdl/scada/v1.0/sensor/history.json';

        reqJson = json_build_object('access_token', accessToken, 'codes', array[pfcode]::text[],
        'begin', tsBegin + 1, 'end', tsEnd + 10);
        raise notice 'fetching history for %,% from [%, %]: %', pfcode, pfname, to_timestamp(tsBegin), to_timestamp(tsEnd), reqJson;
        raise log 'fetching history for %,% from [%, %]: %', pfcode, pfname, to_timestamp(tsBegin), to_timestamp(tsEnd), reqJson;

        tsreq := now();
        select status, content::json
        into statusCode, histJson
        from http_post(url || pathHist, reqJson, 'application/json');
        tsresp := now();

        raise notice 'got history % @ [%,%] from %: %', pfcode, to_timestamp(tsBegin), to_timestamp(tsEnd), url || pathHist, histJson;
        raise log 'got history % @ [%,%] from %: %', pfcode, to_timestamp(tsBegin), to_timestamp(tsEnd), url || pathHist, histJson;

        -- store scada-history-request
        statusCode := histJson->>'Code';
        if statusCode = 0 then
            if histJson->>'Response' is null then
                histCnt := -1;
            else
                select json_array_length(histJson->'Response') into histCnt;
            end if;
        else
            histCnt := -1;
        end if;
        insert into scada.scada_hist_req(codes, dataStartTime, dataEndTime, 
        reqTime, respTime, retFine, dataCount, respText)
        values(json_build_array(pfcode), to_timestamp(tsBegin), to_timestamp(tsEnd),
        tsreq, tsresp, statusCode = 0, histCnt, histJson);

        -- store scada-history one-by-one
        if statusCode = 0 then
            for i in 0..(histCnt - 1) loop
                hist := histJson->'Response'->i;
                insert into scada.scada_hist(fcode, ftime, fvalue, dtype, fts, ftype)
                values(hist->>'code', to_timestamp(cast(hist->>'time' as bigint)),
                    cast(hist->>'value' as float8), pdtype,
                    cast(hist->>'time' as bigint), 'HIST');
                if mod(i, 100) = 0 then
                    raise log 'upload history for %: %', hist->>'code', i;
                    raise notice 'upload history for %: %', hist->>'code', i;
                end if;
            end loop;
            raise log 'upload history totally for %: %', hist->>'code', histCnt;
            raise notice 'upload history totally for %: %', hist->>'code', histCnt;
        else 
            raise log 'fail to fetch history caused by %/%', statusCode, histJson->>'Message';
            raise notice 'fail to fetch history caused by %/%', statusCode, histJson->>'Message';
        end if;
    exception
        when others then
        raise notice 'EXCEPTION when fetch history for %,% [%, %] cased by %', pfcode, pfname, 
        to_timestamp(tsBegin), to_timestamp(tsEnd), SQLERRM;
        raise log 'EXCEPTION when fetch history for %,% [%, %] cased by %', pfcode, pfname, 
        to_timestamp(tsBegin), to_timestamp(tsEnd), SQLERRM;

        rollback;
end;
$$;

create or replace procedure fetchRealtime(
    accessToken  varchar,
    pfcode varchar,
    pfname varchar,
    pdtype varchar)
    language plpgsql
as
$$
    declare url varchar;

    declare tsreq   timestamptz;
    declare tsresp  timestamptz;
    declare statusCode   int4;
    declare reqJson      varchar;

    declare pathReal    varchar;
    declare realJson    json;
    declare rt json;
    declare rtCnt int4;
begin
    -- url: http://10.200.6.72:8082/hdl/oauth/v1.0/access.json
    -- url: http://10.200.6.72:8082/hdl/scada/v1.0/sensor/history.json
    -- url: http://10.200.6.72:8082/hdl/scada/v1.0/sensor/realtime.json
    url := 'http://10.200.6.72:8082/';
    pathReal := 'hdl/scada/v1.0/sensor/realtime.json';

        reqJson = json_build_object('access_token', accessToken, 'codes', array[pfcode]::text[]);
        raise notice 'fetching realtime for %,% : %', pfcode, pfname, reqJson;
        raise log 'fetching realtime for %,% : %', pfcode, pfname, reqJson;

        tsreq := now();
        select status, content::json
        into statusCode, realJson
        from http_post(url || pathReal, reqJson, 'application/json');
        tsresp := now();

        raise notice 'got realtime % from %: %', pfcode, url || pathReal, realJson;
        raise log 'got realtime % from %: %', pfcode, url || pathReal, realJson;

        statusCode := realJson->>'Code';
        if statusCode = 0 then
            if realJson->>'Response' is null then
                rtCnt := -1;
            else
                select json_array_length(realJson->'Response') into rtCnt;
            end if;

            for i in 0..(rtCnt - 1) loop
                rt := realJson->'Response'->i;
                insert into scada.scada_realtime(fstation, fcode, ftime, fvalue, dtype, ftype, fts)
                values(rt->>'station', rt->>'code', to_timestamp(cast(rt->>'time' as bigint)),
                    cast(rt->>'value' as float8), pdtype,
                    rt->>'tag', cast(rt->>'time' as bigint));
            end loop;
        else
            rtCnt := -1;
        end if;

        raise log 'upload realtime totally for %: %', pfcode, rtCnt;
        raise notice 'upload realtime totally for %: %', pfcode, rtCnt;
    exception
        when others then
        raise notice 'EXCEPTION when fetch realtime for %,% caused by %', pfcode, pfname, SQLERRM;
        raise log 'EXCEPTION when fetch realtime for %,% caused by %', pfcode, pfname, SQLERRM;

        rollback;
end;
$$;

